<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>形式语言和自动机初步</title>
    <url>/2020/03/04/formal-language-and-automata/</url>
    <content><![CDATA[<p>参考离散数学(清华大学出版社,第五版)相关内容  </p>
<p>ps: 编辑公式真费时间$\to$_$\to$</p>
<hr>
<p>自动机是描述计算的数学模型,用来识别语言或计算函数. 形式文法也是一种数学模型,用来产生形式语言. 形式语言和自动机理论密切相关,是计算机科学和技术的重要理论基础.  </p>
<p>本文扼要地介绍形式文法的基本概念,有穷自动机和图灵机以及它们识别的语言类,其他不做分析</p>
<a id="more"></a>

<h2 id="形式语言和形式文法"><a href="#形式语言和形式文法" class="headerlink" title="形式语言和形式文法"></a>形式语言和形式文法</h2><p>形式语言的描述最早在1956年由语言学家乔姆斯基建立</p>
<p>在乔姆斯基的分类中,形式文法一共有如下几类:</p>
<ul>
<li>0型文法: 现证明等价于图灵机(下同)</li>
<li>1型文法: 等价于非确定型线性界限自动机</li>
<li>2型文法: 等价于非确定型下推自动机</li>
<li>3型文法: 等价于有穷自动机</li>
</ul>
<p>形式文法,特别是上下文无关文法(2型文法)和正则文法(3型文法)在程序设计语言和编译理论中起着重要的作用</p>
<h3 id="字符串和形式语言"><a href="#字符串和形式语言" class="headerlink" title="字符串和形式语言"></a>字符串和形式语言</h3><p>抽象而言,语言是按照一定规则排列的符号的集合</p>
<p>定义:</p>
<ul>
<li>字母表$\Sigma$: 一个非空的有穷集合</li>
<li>字符串$\omega$: 由$\Sigma$中的符号组成的有穷序列,如$a_ia_j…a_k$; 特别地,$aaa…a$记作$a^n$</li>
<li>$\vert \omega \vert$: 字符串$\omega$的长度, 空串$\epsilon$长度为0  </li>
</ul>
<ul>
<li>形式语言(语言): $\Sigma^*$的任何子集称作字母表$\Sigma$上的形式语言, 其中,$\Sigma^*$是$\Sigma$上字符串的全体  </li>
</ul>
<blockquote>
<p>$\emptyset, \lbrace \epsilon \rbrace, \Sigma^*$都是$\Sigma$上的语言. 注意,前两者是不同的</p>
</blockquote>
<p>在字符串$\omega$中:</p>
<ul>
<li>前缀: 由$\omega$左端若干个连续符号组成的字符串</li>
<li>后缀: 由$\omega$右端若干个连续符号组成的字符串</li>
<li>字串: 由$\omega$任何部位若干个连续符号组成的字符串</li>
<li>连接运算: $\omega_1\omega_2$表示把$\omega_2$接在$\omega_1$的右边, 显然,它是可结合的</li>
</ul>
<h3 id="形式文法"><a href="#形式文法" class="headerlink" title="形式文法"></a>形式文法</h3><p>语言是由一定规则产生出来的,这种规则就是文法</p>
<p>例如,<code>9+5-2</code>这个字符串可由如下文法规则产生:</p>
<blockquote>
<ol>
<li>表达式-&gt;表达式+数字;  </li>
<li>表达式-&gt;表达式-数字;  </li>
<li>表达式-&gt;数字;</li>
<li>数字-&gt;2;  </li>
<li>数字-&gt;5;  </li>
<li>数字-&gt;9;</li>
</ol>
</blockquote>
<p>定义:</p>
<ul>
<li>产生式: 文法中的每一条规则都叫做产生式</li>
<li>终结符: 不能产生其他字符串的符号, 如上述文法中的2,5,9</li>
<li>非终结符: 文法规则中除了终结符之外的其他符号,如<code>表达式</code>,<code>数字</code>,<code>+</code>,<code>-</code></li>
</ul>
<p><code>9+5-2</code>的推理过程:</p>
<ul>
<li>从<code>表达式</code>开始由2,1,3得到<code>数字+数字+数字</code></li>
<li>由4,5,6可以得到<code>9+5-2</code></li>
</ul>
<p>当然,这组规则不仅仅只能推出<code>9+5-2</code>  </p>
<p>注意: 规则所推出的字符串在语义上不一定正确,但在形式上都是合法的</p>
<h4 id="形式文法的定义"><a href="#形式文法的定义" class="headerlink" title="形式文法的定义"></a>形式文法的定义</h4><p>一个形式文法是一个有序四元组$G=&lt;V,T,S,P&gt;$, 其中:</p>
<ul>
<li>$V$是一个非空有限集合,集合的元素称作变元或<strong>非终结符</strong></li>
<li>$T$是一个非空有限集合,$V\cap T=\emptyset$,集合中的元素称作<strong>终结符</strong></li>
<li>$S\in V$称作<strong>起始符</strong></li>
<li>$P$是一个非空有穷集合,它的元素称作<strong>产生式</strong>或改写规则<br>&emsp; $P$中元素应有这样的形式: a-&gt;b; 其中a,b$\in (V\cup T)^*$, 且a$\ne \epsilon$</li>
</ul>
<h4 id="派生-生成语言"><a href="#派生-生成语言" class="headerlink" title="派生,生成语言"></a>派生,生成语言</h4><p>直接派生:</p>
<ul>
<li>给定文法$G=&lt;V,T,S,P&gt;$,设$x,y \in (V \cup T)^*$. 称<strong>$y$是$x$的直接派生($x\Rightarrow y$)</strong>,当且仅当:  <blockquote>
<p>$\exists u,v \in (V \cup T)^* $ 且 $ \exists$ ‘a-&gt;b’ $\in P$ 使得 $x = uav,y = ubv$ (即把x中的a改写成b后得到y)  </p>
</blockquote>
</li>
</ul>
<p>派生:</p>
<ul>
<li>给定文法$G=&lt;V,T,S,P&gt;$,设$x_1,x_2,…,x_n \in (V \cup T)^*, n \ge 1 且 x_1\Rightarrow x_2 \Rightarrow … \Rightarrow x_n $, 则称<strong>$x_n$是由$x_1$派生出来的($x_1 \dot \Rightarrow x_n$)</strong>  <blockquote>
<p>注意,对$V \cup T$上的所有字符串$\omega$有$\omega \dot \Rightarrow \omega$. 可见$\dot \Rightarrow$是$\Rightarrow$的自反传递闭包  </p>
</blockquote>
</li>
</ul>
<p>生成语言:  </p>
<ul>
<li>设$G=&lt;V,T,S,P&gt;$是一个文法,$L(G)$是文法G<strong>生成的语言</strong>,则$L(G)$满足<br>$$ L(G) = \lbrace \omega \in T^* | S \dot \Rightarrow \omega \rbrace $$   <blockquote>
<p>根据定义,$L(G)$中的字符串满足如下两个条件:</p>
<ol>
<li>字符串由终结符构成</li>
<li>字符串可以由起始符派生出来</li>
</ol>
</blockquote>
</li>
</ul>
<p>文法的等价</p>
<ul>
<li>如果$L(G_1) = L(G_2)$,则称文法$G_1$和$G_2$<strong>等价</strong></li>
</ul>
<h3 id="形式文法分类"><a href="#形式文法分类" class="headerlink" title="形式文法分类"></a>形式文法分类</h3><h4 id="0型文法-无限制文法"><a href="#0型文法-无限制文法" class="headerlink" title="0型文法: 无限制文法"></a>0型文法: 无限制文法</h4><p>0型文法就是一般形式的文法,在形式文法定义的基础上不附加任何条件  </p>
<p>一个0型文法是一个有序四元组$G=&lt;V,T,S,P&gt;$, 其中:</p>
<ul>
<li>$V$是非终结符集合,非空有限</li>
<li>$T$是终结符集合,非空有限,$V\cap T=\emptyset$</li>
<li>$S\in V$是<strong>起始符</strong></li>
<li>$P$是产生式集合,非空有限</li>
</ul>
<p>0型文法又称作短语结构文法或无限制文法,0型文法生成的语言称作0型语言</p>
<h4 id="1型文法-上下文有关文法"><a href="#1型文法-上下文有关文法" class="headerlink" title="1型文法: 上下文有关文法"></a>1型文法: 上下文有关文法</h4><p>1型文法在0型文法上加了一条限制: 对P中每一个产生式a-&gt;b都有$\vert a \vert \ge \vert b \vert$  </p>
<p>一个1型文法是一个有序四元组$G=&lt;V,T,S,P&gt;$, 其中:</p>
<ul>
<li>$V$是非终结符集合,非空有限</li>
<li>$T$是终结符集合,非空有限,$V\cap T=\emptyset$</li>
<li>$S\in V$是<strong>起始符</strong></li>
<li>$P$是产生式集合,非空有限<blockquote>
<p>$P$中元素应有这样的形式: 对P中任意一个产生式a-&gt;b都有$\vert a \vert \ge \vert b \vert$  </p>
</blockquote>
</li>
</ul>
<p>每一个1型文法都等价于这样一个文法(证明略),它的产生式形如<br>$$ uAv \to u \alpha v $$  </p>
<blockquote>
<p>这里$ A \in V, u,v \in (V \cup T)^* ,\alpha \ne \epsilon$  </p>
</blockquote>
<p>也就是说,在这种文法中,替换变元时必须考虑它的上下文,才能把$A$换成$\alpha$  </p>
<p>因此,1型文法又叫做上下文有关文法,若$L-\lbrace \epsilon \rbrace$可由1型文法生成,则L称作1型语言或上下文有关语言(1型文法本身不能生成$\epsilon$)</p>
<h4 id="2型文法-上下文无关文法"><a href="#2型文法-上下文无关文法" class="headerlink" title="2型文法: 上下文无关文法"></a>2型文法: 上下文无关文法</h4><p>2型文法在1型文法的基础上又做了一些限制(令上文中的$u,v = \epsilon$)</p>
<p>一个2型文法是一个有序四元组$G=&lt;V,T,S,P&gt;$, 其中:</p>
<ul>
<li>$V$是非终结符集合,非空有限</li>
<li>$T$是终结符集合,非空有限,$V\cap T=\emptyset$</li>
<li>$S\in V$是<strong>起始符</strong></li>
<li>$P$是产生式集合,非空有限<blockquote>
<p>$P$中元素应有这样的形式: $ A \to \alpha $; 其中$A \in V, \alpha \in (V\cup T)^*$ <em>(0型文法是$A \in (V\cup T)^*$)</em>  </p>
</blockquote>
</li>
</ul>
<p>此时,在这种文法中,替换变元时不需要考虑它的上下文</p>
<p>因此,2型文法又称作上下文无关文法,2型文法生成的语言称作2型语言或上下文无关语言</p>
<h4 id="3型文法-正则文法"><a href="#3型文法-正则文法" class="headerlink" title="3型文法: 正则文法"></a>3型文法: 正则文法</h4><p>3型文法在2型文法的基础上做了更多的限制,其分为右线性文法和左线性文法</p>
<p>一个<strong>右线性文法</strong>是一个有序四元组$G=&lt;V,T,S,P&gt;$, 其中:</p>
<ul>
<li>$V$是非终结符集合,非空有限</li>
<li>$T$是终结符集合,非空有限,$V\cap T=\emptyset$</li>
<li>$S\in V$是<strong>起始符</strong></li>
<li>$P$是产生式集合,非空有限<blockquote>
<p>$P$中元素应有这样的形式: $ A \to \alpha B $或$ A \to \alpha $; 其中$A,B \in V, \alpha \in T^*$ <em>(注意符号所属范围)</em></p>
</blockquote>
</li>
</ul>
<p>一个<strong>左线性文法</strong>是一个有序四元组$G=&lt;V,T,S,P&gt;$, 其中:</p>
<ul>
<li>$V$是非终结符集合,非空有限</li>
<li>$T$是终结符集合,非空有限,$V\cap T=\emptyset$</li>
<li>$S\in V$是<strong>起始符</strong></li>
<li>$P$是产生式集合,非空有限<blockquote>
<p>$P$中元素应有这样的形式: $ A \to B \alpha $或$ A \to \alpha $; 其中$A,B \in V, \alpha \in T^*$  </p>
</blockquote>
</li>
</ul>
<p>右线性文法和左线性文法统称做3型文法或正则文法,3型文法生成的语言称作3型语言或正则语言  </p>
<p>可以证明的是,每一个右线性文法都存在与之等价的左线性文法,反之亦然; 即每一个正则语言都可以同时用右线性文法和左线性文法生成</p>
<h4 id="几种形式文法生成的语言类之间的关系"><a href="#几种形式文法生成的语言类之间的关系" class="headerlink" title="几种形式文法生成的语言类之间的关系"></a>几种形式文法生成的语言类之间的关系</h4><p>这几种语言类之间存在着真包含关系</p>
<ul>
<li>正则语言是上下文无关语言</li>
<li>上下文无关语言是上下文有关语言</li>
<li>上下文有关语言是0型语言</li>
</ul>
<p>在编译原理中,词法分析可以用正则文法解决,而语法分析使用上下文无关文法</p>
<p>注: 在正则文法和上下文无关文法中,当同一个符号作为多个产生式的左端时,可以用”或”<code>|</code>来合在一起写</p>
<h2 id="图灵机TM"><a href="#图灵机TM" class="headerlink" title="图灵机TM"></a>图灵机TM</h2><p>图灵机是图灵于1936年提出的一种数学模型, 这个模型很好地描述了计算的过程. 大量事实表明, 任何算法都可以用一个图灵机来描述, 这就是Chruch论题.  </p>
<p>图灵机在可计算性理论中起着重要的作用, 可以证明, 图灵机识别的语言是0型语言</p>
<h3 id="图灵机的基本模型"><a href="#图灵机的基本模型" class="headerlink" title="图灵机的基本模型"></a>图灵机的基本模型</h3><p>设想图灵机由一个控制器和一条无穷长的纸带组成,纸带分成了一个一个的小方格，每个方格有不同的颜色。有一个机器头在纸带上移来移去。机器头有一组内部状态，还有一些固定的程序。在每个时刻，机器头都要从当前纸带上读入一个方格信息，然后结合自己的内部状态查找程序表，根据程序输出信息到纸带方格上，并转换自己的内部状态，然后进行移动, 如下图:<br><img src="/2020/03/04/formal-language-and-automata/TM0.jpg" alt="TM"></p>
<h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>图灵机是一个有序组$M = &lt;Q, \Sigma, \Gamma, \delta, q_0, B, A&gt;$, 其中</p>
<ul>
<li>$Q$是非空有穷的状态集合</li>
<li>$\Sigma$是非空有穷的输入字母表</li>
<li>$\Gamma$是非空有穷的带字母表且$\Sigma \subset \Gamma$</li>
<li>$\delta$为一个$Q \times \Gamma \to \Gamma \times \lbrace L, R \rbrace \times Q$的映射,是动作函数</li>
<li>$q_0 \in Q$是初始状态</li>
<li>$B \in \Gamma - \Sigma$是空白符</li>
<li>$A \subset Q$是接收状态的集合<blockquote>
<p>对于$\delta$, 给定当前状态$q$和当前位置的符号$s$,它能将当前位置的符号改为$s’$、并且给出扫描头移动方向和次态$q’$; 即$\delta (q,s) = (s’, L/R, q’)$</p>
</blockquote>
</li>
</ul>
<p>显然,对于每一步计算,带上只有穷个方格的内容是非空白符,因此,纸带可以表示为$$Ba_1a_2…a_nB$$即两边都有无穷多个空白符的形式  </p>
<p>给定了图灵机M和纸带,为了描述计算中的每一步,这里又有一些定义:</p>
<ul>
<li><p>格局: 计算中某一步时带上的内容、控制器的状态和读写头扫视的带方格称为M的一个格局</p>
<blockquote>
<p>一般地,一个格局总可以表示成$\alpha_1 q \alpha_2$, 其中$\alpha_1, \alpha_2 \in \Gamma, q \in Q$<br>这表示带上的内容为$\alpha_1 \alpha_2$, 当前状态为$q$, 读写头正在扫视$\alpha_2$的第一个字符(若$\alpha_2$是空串则扫视紧挨在右边的空白符)   </p>
<ul>
<li>$q_0\omega$是M的初始格局,$\omega \in \Sigma^*$是输入字符串  </li>
</ul>
</blockquote>
</li>
<li><p>接受格局: $\sigma = \alpha_1 q \alpha_2$中的$q$是接收状态,即$q \in A$</p>
</li>
<li><p>停机格局: $\sigma$时对应的&amp;\delta (q,s)&amp;没有定义,即图灵机不知道接下来一步要干什么  </p>
</li>
<li><p>$\vdash$: 设$\sigma_1, \sigma_2$是两个格局, 如果从$\sigma_1$经过一步到达$sigma_2$,则记作$\sigma_1\vdash\sigma_2$</p>
</li>
<li><p>$\dot \vdash$: 设$\sigma_1, \sigma_2$是两个格局, 如果从$\sigma_1$经过有限步到达$sigma_2$,则记作$\sigma_1\dot\vdash\sigma_2$  </p>
</li>
<li><p>计算: 一个格局序列$\sigma_1,\sigma_2,…,\sigma_n,…$(可以有穷也可以无穷)中每一个$\sigma_{i+1}$都能由$\sigma_i$一步得到,则称这个序列是一个计算</p>
</li>
</ul>
<h3 id="图灵机接受的语言"><a href="#图灵机接受的语言" class="headerlink" title="图灵机接受的语言"></a>图灵机接受的语言</h3><p>任给一个字符串$\omega$,从初始格局开始,图灵机M在字符串上的计算有如下三种可能:</p>
<ul>
<li>停机在接受状态,此时称图灵机M接受字符串$\omega$</li>
<li>婷机在非接受状态,此时图灵机M不接受或拒绝字符串$\omega$</li>
<li>用不停机,此时也称图灵机M不接受或拒绝字符串$\omega$</li>
</ul>
<p>则图灵机M接受的语言L(M)可定义为:<br>$$L(M) = \lbrace \omega | \omega \in \Sigma^* , M接受\omega \rbrace$$</p>
<h3 id="状态转移图"><a href="#状态转移图" class="headerlink" title="状态转移图"></a>状态转移图</h3><p>状态转移图是一个有向图,每一个节点代表一个状态; 初始状态用一个指向该节点的箭头标明, 终结状态用双圈标明; 边上应注明状态转换时的输入/输出</p>
<p>例如:<br><img src="/2020/03/04/formal-language-and-automata/TM1.png" alt="TM"></p>
<ul>
<li>状态转移图有时候也可以用状态转移表表示</li>
</ul>
<h3 id="用图灵机计算函数"><a href="#用图灵机计算函数" class="headerlink" title="用图灵机计算函数"></a>用图灵机计算函数</h3><p>NaN</p>
<h2 id="线性界限自动机LBA"><a href="#线性界限自动机LBA" class="headerlink" title="线性界限自动机LBA"></a>线性界限自动机LBA</h2><p>线性界限自动机(Linear Bounded Automaton)是有限制的图灵机; 它不使用无限纸带，它的纸带有同输入符号数目成正比的空间  </p>
<p>可以证明,LBA 接受上下文有关语言</p>
<h2 id="下推自动机PDA"><a href="#下推自动机PDA" class="headerlink" title="下推自动机PDA"></a>下推自动机PDA</h2><p>下推自动机(Pushdown Automation)可以看成是一个带有附加下推存储器的有穷自动机,下推存储器是一个堆栈,如下:<br><img src="/2020/03/04/formal-language-and-automata/PDA0.png" alt="PDA"></p>
<p>如果把下推自动机扩展，允许一个有限状态自动机存取两个栈，我们得到一个能力更强的自动机，这个自动机与图灵机等价</p>
<h2 id="有穷自动机FA"><a href="#有穷自动机FA" class="headerlink" title="有穷自动机FA"></a>有穷自动机FA</h2><p>有穷自动机(Finity Automation)是具有离散输入和输出系统的一种数学模型,它有有限个内部状态.随着信号的输入,内部状态不断地转移</p>
<h3 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h3><p>有穷自动机(FA)是一个有序五元组$M = &lt;Q, \Sigma, \delta, q_0, F&gt;$, 其中</p>
<ul>
<li>$Q$是非空有穷的状态集合</li>
<li>$\Sigma$是非空有穷的输入字母表</li>
<li>$\delta$为一个$Q \times \Sigma \to Q$上的映射,是状态转移函数</li>
<li>$q_0 \in Q$是初始状态</li>
<li>$F \subseteq Q$是终结状态集合</li>
</ul>
<p>为了精确描述有穷自动机在输入字符串上的动作,我们推广状态转移函数为$\hat \delta : Q \times \Sigma^* to Q $如下</p>
<blockquote>
<p>对任意的$q \in Q, \omega \in \Sigma^*, a \in \Sigma$都有:<br>$$\hat \delta (q, \epsilon) = q$$  $$\hat \delta (q, \omega a) = \delta (\hat \delta (q, \omega), a)$$<br>即$\hat \delta (q, \omega)$正好是自动机从状态$q$开始扫描完$\omega$所有符号后所处的状态</p>
</blockquote>
<h3 id="有穷自动机接受的语言"><a href="#有穷自动机接受的语言" class="headerlink" title="有穷自动机接受的语言"></a>有穷自动机接受的语言</h3><p>有穷自动机$M = &lt;Q, \Sigma, \delta, q_0, F&gt;$接受的语言$L(M)$为:<br>$$L(M) = \lbrace \omega | \omega \in \Sigma^* , \hat \delta (q_0, \omega) \in F \rbrace$$</p>
<p>由$\delta$定义可知,对于一个确定的状态$q$和输入$a$,输出的次态是唯一的,所以FA在给定字符串上的动作是确定的; 因此上面讲的有穷自动机又叫确定型有穷自动机(DFA)</p>
<h3 id="非确定型有穷自动机NFA"><a href="#非确定型有穷自动机NFA" class="headerlink" title="非确定型有穷自动机NFA"></a>非确定型有穷自动机NFA</h3><p>若在有穷自动机中,FA在输入字符串上的动作是不确定的,那么这种自动机叫做非确定型有穷自动机</p>
<h4 id="定义-2"><a href="#定义-2" class="headerlink" title="定义"></a>定义</h4><p>非确定型有穷自动机是一个有序五元组$M = &lt;Q, \Sigma, \delta, q_0, F&gt;$, 其中</p>
<ul>
<li>$Q$是非空有穷的状态集合</li>
<li>$\Sigma$是非空有穷的输入字母表</li>
<li>$\delta$为一个$Q \times \Sigma \to \rho(Q)$上的映射,$\rho(Q)$表示Q的幂集</li>
<li>$q_0 \in Q$是初始状态</li>
<li>$F \subseteq Q$是终结状态集合<br>这样,$\delta (q, a)$就是一个状态集合,它可以含有一个或多个状态,也可以是空集</li>
</ul>
<p>类似地,我们将$\delta$推广成$\hat \delta : Q \times \Sigma^* to \rho(Q)$:</p>
<blockquote>
<p>对任意的$q \in Q, \omega \in \Sigma^*, a \in \Sigma$都有:<br>$$\hat \delta (q, \epsilon) = \lbrace q \rbrace$$  $$\hat \delta (q, \omega a) =\bigcup_{r \in \hat \delta (q, \omega)} \hat \delta (r, a)$$<br>此时$\hat \delta (q, \omega)$表示的是从状态$q$开始扫描完$\omega$所有符号后所有可能的结束状态的集合</p>
</blockquote>
<h4 id="NFA接受的语言"><a href="#NFA接受的语言" class="headerlink" title="NFA接受的语言"></a>NFA接受的语言</h4><p>非确定型有穷自动机$M = &lt;Q, \Sigma, \delta, q_0, F&gt;$接受的语言$L(M)$为:<br>$$L(M) = \lbrace \omega | \omega \in \Sigma^* , \hat \delta (q_0, \omega) \cap F \ne \emptyset \rbrace$$</p>
<h4 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h4><ul>
<li>每一个DFA都可以看成一个特殊的NFA,只要把$\hat \delta (q, \epsilon) = q$看成$\hat \delta (q, \epsilon) = \lbrace q \rbrace$即可  </li>
</ul>
<p>实际上,相比于DFA,非确定性并没有增加NFA的能力,正如下面所述:</p>
<ul>
<li>对每一个非确定型有穷自动机$M$,都存在一个确定型有穷自动机$M’$,使得$L(M) = L(M’)$(证明略)  </li>
</ul>
<p>这种转换方式在此不做介绍</p>
<h3 id="带-epsilon-转移的非确定型有穷自动机"><a href="#带-epsilon-转移的非确定型有穷自动机" class="headerlink" title="带$\epsilon$转移的非确定型有穷自动机"></a>带$\epsilon$转移的非确定型有穷自动机</h3><p>对NFA稍加推广,不仅对$\Sigma$中的每一个符号都可以有状态转移, 而且在不读入任何符号(或者说读入空串$\epsilon$)的情况下,自动机在某些状态下也可以自动转移高另一个状态, 这样的NFA称为带$\epsilon$转移的NFA</p>
<h4 id="定义-3"><a href="#定义-3" class="headerlink" title="定义"></a>定义</h4><p>带$\epsilon$转移的非确定型有穷自动机是一个有序五元组$M = &lt;Q, \Sigma, \delta, q_0, F&gt;$, 其中</p>
<ul>
<li>$Q$是非空有穷的状态集合</li>
<li>$\Sigma$是非空有穷的输入字母表</li>
<li>$\delta$为一个$Q \times (\Sigma \cup \lbrace \epsilon \rbrace) \to \rho(Q)$上的映射,$\rho(Q)$表示Q的幂集</li>
<li>$q_0 \in Q$是初始状态</li>
<li>$F \subseteq Q$是终结状态集合</li>
</ul>
<h4 id="性质-1"><a href="#性质-1" class="headerlink" title="性质"></a>性质</h4><ul>
<li>NFA可以看成是特殊的带$\epsilon$转移的NFA  </li>
</ul>
<p>实际上,带$\epsilon$转移也没有增加NFA的能力:</p>
<ul>
<li>对每一个带$\epsilon$转移的非确定型有穷自动机$M$,都存在一个非确定型有穷自动机$M’$,使得$L(M) = L(M’)$(证明略)  </li>
</ul>
<p>可见,DFA、NFA、带$\epsilon$转移的NFA这三种自动机模型是等价的</p>
<h3 id="有穷自动机和正则文法的等价性"><a href="#有穷自动机和正则文法的等价性" class="headerlink" title="有穷自动机和正则文法的等价性"></a>有穷自动机和正则文法的等价性</h3><ul>
<li>模拟是证明两个计算模型等价的主要方法; 用模型A模拟模型B,就是用模型A实现模型B的计算  </li>
</ul>
<p>可以证明,有穷自动机识别的语言类型恰好是正则语言:</p>
<ul>
<li>对每一个正则语言L,都存在一个带$\epsilon$转移的非确定型有穷自动机$M$使得$L(M) = L$</li>
<li>对每一个带$\epsilon$转移的非确定型有穷自动机$M$,都存在一个右线性文法$G$和左线性文法$G’$使得$L(G) = L(G’)=L(M)$</li>
</ul>
]]></content>
      <categories>
        <category>notes</category>
      </categories>
      <tags>
        <tag>learning</tag>
        <tag>编译原理</tag>
      </tags>
  </entry>
  <entry>
    <title>markdown中的公式编辑</title>
    <url>/2020/03/04/markdown-formula-editor/</url>
    <content><![CDATA[<h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><h3 id="行内公式"><a href="#行内公式" class="headerlink" title="行内公式"></a>行内公式</h3><p>正文(inline)中的LaTeX公式用<code>$...$</code>定义</p>
<p>例如<code>$\sum_{i=0}^N\int_{a}^{b}g(t,i)\text{d}t$</code></p>
<p>显示为$\sum_{i=0}^N\int_{a}^{b}g(t,i)\text{d}t$</p>
<h3 id="行间公式"><a href="#行间公式" class="headerlink" title="行间公式"></a>行间公式</h3><p>单独显示(display)的LaTeX公式用<code>$$...$$</code>定义，此时公式居中并放大显示  </p>
<p>例如<code>$$\sum_{i=0}^N\int_{a}^{b}g(t,i)\text{d}t$$</code>   </p>
<p>显示为$$\sum_{i=0}^N\int_{a}^{b}g(t,i)\text{d}t$$ </p>
<a id="more"></a>

<h2 id="希腊字母"><a href="#希腊字母" class="headerlink" title="希腊字母"></a>希腊字母</h2><table>
<thead>
<tr>
<th align="center">命令</th>
<th align="center">显示</th>
<th align="center">命令</th>
<th align="center">显示</th>
</tr>
</thead>
<tbody><tr>
<td align="center">\alpha</td>
<td align="center">$\alpha$</td>
<td align="center">A</td>
<td align="center">$A$</td>
</tr>
<tr>
<td align="center">\beta</td>
<td align="center">$\beta$</td>
<td align="center">B</td>
<td align="center">$B$</td>
</tr>
<tr>
<td align="center">\gamma</td>
<td align="center">$\gamma$</td>
<td align="center">\Gamma</td>
<td align="center">$\Gamma$</td>
</tr>
<tr>
<td align="center">\delta</td>
<td align="center">$\delta$</td>
<td align="center">\Delta</td>
<td align="center">$\Delta$</td>
</tr>
<tr>
<td align="center">\epsilon</td>
<td align="center">$\epsilon$</td>
<td align="center">E</td>
<td align="center">$E$</td>
</tr>
<tr>
<td align="center">\zeta</td>
<td align="center">$\zeta$</td>
<td align="center">Z</td>
<td align="center">$Z$</td>
</tr>
<tr>
<td align="center">\eta</td>
<td align="center">$\eta$</td>
<td align="center">H</td>
<td align="center">$H$</td>
</tr>
<tr>
<td align="center">\theta</td>
<td align="center">$\theta$</td>
<td align="center">\Theta</td>
<td align="center">$\Theta$</td>
</tr>
<tr>
<td align="center">\iota</td>
<td align="center">$\iota$</td>
<td align="center">I</td>
<td align="center">$I$</td>
</tr>
<tr>
<td align="center">\kappa</td>
<td align="center">$\kappa$</td>
<td align="center">K</td>
<td align="center">$K$</td>
</tr>
<tr>
<td align="center">\lambda</td>
<td align="center">$\lambda$</td>
<td align="center">\Lambda</td>
<td align="center">$\Lambda$</td>
</tr>
<tr>
<td align="center">\mu</td>
<td align="center">$\mu$</td>
<td align="center">M</td>
<td align="center">$M$</td>
</tr>
<tr>
<td align="center">\nu</td>
<td align="center">$\nu$</td>
<td align="center">N</td>
<td align="center">$N$</td>
</tr>
<tr>
<td align="center">\xi</td>
<td align="center">$\xi$</td>
<td align="center">\Xi</td>
<td align="center">$\Xi$</td>
</tr>
<tr>
<td align="center">\omicron</td>
<td align="center">$\omicron$</td>
<td align="center">O</td>
<td align="center">$O$</td>
</tr>
<tr>
<td align="center">\pi</td>
<td align="center">$\pi$</td>
<td align="center">\Pi</td>
<td align="center">$\Pi$</td>
</tr>
<tr>
<td align="center">\rho</td>
<td align="center">$\rho$</td>
<td align="center">P</td>
<td align="center">$P$</td>
</tr>
<tr>
<td align="center">\sigma</td>
<td align="center">$\sigma$</td>
<td align="center">\Sigma</td>
<td align="center">$\Sigma$</td>
</tr>
<tr>
<td align="center">\tau</td>
<td align="center">$\tau$</td>
<td align="center">T</td>
<td align="center">$T$</td>
</tr>
<tr>
<td align="center">\upsilon</td>
<td align="center">$\upsilon$</td>
<td align="center">Y</td>
<td align="center">$Y$</td>
</tr>
<tr>
<td align="center">\phi</td>
<td align="center">$\phi$</td>
<td align="center">\Phi</td>
<td align="center">$\Phi$</td>
</tr>
<tr>
<td align="center">\chi</td>
<td align="center">$\chi$</td>
<td align="center">X</td>
<td align="center">$X$</td>
</tr>
<tr>
<td align="center">\psi</td>
<td align="center">$\psi$</td>
<td align="center">\Psi</td>
<td align="center">$\Psi$</td>
</tr>
<tr>
<td align="center">\omega</td>
<td align="center">$\omega$</td>
<td align="center">\Omega</td>
<td align="center">$\Omega$</td>
</tr>
</tbody></table>
<h2 id="上下标"><a href="#上下标" class="headerlink" title="上下标"></a>上下标</h2><p>上标和下标分别使用<code>^</code>与<code>_</code>，例如<code>$x_i^2$</code>表示的是$x_i^2$  </p>
<p>默认情况下, 上下标符号仅仅对下一个组起作用。一个组即单个字符或者使用<code>{..}</code> 包裹起来的内容。如果使用<code>$10^10$</code>表示的是$10^10$;而<code>$10^{10}$</code>才是$10^{10}$。同时,大括号还能消除二义性，如<code>x^5^6</code> 将得到一个错误，必须使用大括号来界定^的结合性，如<code>${x^5}^6$</code>:${x^5}^6$或者<code>$x^{5^6}$</code>:$x^{5^6}$。</p>
<h2 id="括号"><a href="#括号" class="headerlink" title="括号"></a>括号</h2><p>使用原始的<code>( )</code>,<code>[ ]</code> 即可，如<code>$(2+3)[4+4]$</code>:$(2+3)[4+4]$<br>使用\left(或\right)使符号大小与邻近的公式相适应（该语句适用于所有括号类型），如<code>$\left(\frac{x}{y}\right)$</code>:$\left(\frac{x}{y}\right)$</p>
<p>以下转载<a href="https://www.jianshu.com/p/8b6fc36035c0" target="_blank" rel="noopener">https://www.jianshu.com/p/8b6fc36035c0</a></p>
<!DOCTYPE html>
<html lang="en">
<head>
<title></title>
  <meta name="generator" content="hexo-theme-yilia-plus">
<style>
body, html {
    width: 100%;
    height: 100%;
}
*, ::after, ::before {
    -webkit-box-sizing: border-box;
    box-sizing: border-box;
}
article, aside, dialog, figcaption, figure, footer, header, hgroup, main, nav, section {
    display: block;
}
._2rhmJa {
    font-weight: 400;
    line-height: 1.8;
    margin-bottom: 20px;
    padding-right: 50px;
}
._3Z3nHf, .ouvJEz {
    background-color: #fff;
    border-radius: 4px;
    margin-bottom: 10px;
}
.ouvJEz {
    padding: 24px;
}
._gp-ck {
    flex-shrink: 0;
    width: 730px;
    margin-bottom: 24px;
    margin-right: 10px;
}
._3VRLsv {
    box-sizing: content-box;
    padding-left: 16px;
    padding-right: 1000px;
    margin-left: auto;
    margin-right: auto;
}
._3VRLsv {
    justify-content: center;
    align-items: flex-start;
    min-height: calc(-66px + 100vh);
}
._3kbg6I {
    background-color: #f9f9f9;
}
body {
    margin: 0;
    color: rgba(0, 0, 0, 0.65);
    font-size: 14px;
    font-family: -apple-system,BlinkMacSystemFont,"Segoe UI","PingFang SC","Hiragino Sans GB","Microsoft YaHei","Helvetica Neue",Helvetica,Arial,sans-serif,"Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol";
    line-height: 1.5;
    -webkit-font-feature-settings: "tnum","tnum";
    font-feature-settings: "tnum" 1, "tnum" 1;
}
body {
    line-height: 1.4285;
    color: #404040;
    background-color: #fff;
    font-family: -apple-system,BlinkMacSystemFont,"Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol","Segoe UI","PingFang SC","Hiragino Sans GB","Microsoft YaHei","Helvetica Neue",Helvetica,Arial,sans-serif;
    font-feature-settings: "tnum" 1;
    font-variant: tabular-nums;
}
html {
    font-family: sans-serif;
    line-height: 1.15;
    -webkit-text-size-adjust: 100%;
    -ms-text-size-adjust: 100%;
    -ms-overflow-style: scrollbar;
    -webkit-tap-highlight-color: rgba(0, 0, 0, 0);
}
html {
    --antd-wave-shadow-color: #ec7259;
}
p {
    margin-top: 0px;
    margin-bottom: 1em;
}
._2rhmJa p {
    margin-bottom: 20px;
    word-break: break-word;
}
hr {
    -webkit-box-sizing: content-box;
    box-sizing: content-box;
    height: 0px;
    overflow: visible;
}
._2rhmJa hr {
    margin: 0 0 20px;
    border: 0;
    border-top: 1px solid #eee !important;
}
table {
    border-collapse: collapse;
}
._2rhmJa table {
    width: 100%;
    margin-bottom: 20px;
    border-collapse: collapse;
    border: 1px solid #eee;
    border-left: none;
    word-break: break-word;
}
h1, h2, h3, h4, h5, h6 {
    margin-top: 0px;
    margin-bottom: 0.5em;
    color: rgba(0, 0, 0, 0.85);
    font-weight: 500;
}
b, strong {
    font-weight: bolder;
}
b, h1, h2, h3, h4, h5, h6, strong {
    font-weight: 600;
}
h1, h2, h3, h4, h5, h6 {
    color: #404040;
    text-rendering: optimizelegibility;
}
._2rhmJa h1, ._2rhmJa h2, ._2rhmJa h3, ._2rhmJa h4, ._2rhmJa h5, ._2rhmJa h6 {
    margin-bottom: 16px;
}
._2rhmJa h2 {
    font-size: 24px;
}
dl, ol, ul {
    margin-top: 0px;
    margin-bottom: 1em;
}
ol, ul {
    padding-left: 0px;
    margin: 0;
    list-style: none;
}
ol ol, ol ul, ul ol, ul ul {
    margin-bottom: 0px;
}
._2rhmJa ol, ._2rhmJa ul {
    word-break: break-word;
    margin: 0 0 20px 20px;
}
._2rhmJa ul {
    list-style-type: disc;
}
._2Uzcx_ {
    position: relative;
    overflow: hidden;
}
._2rhmJa h3 {
    font-size: 22px;
}
._2rhmJa ol {
    list-style-type: decimal;
}
._2rhmJa table tr:nth-of-type(2n) {
    background-color: hsla(0, 0%, 70%, 0.15);
}
th {
    text-align: inherit;
}
._2rhmJa table td, ._2rhmJa table th {
    padding: 8px;
    border: 1px solid #eee;
    line-height: 20px;
    vertical-align: middle;
}
a {
    color: #ec7259;
    text-decoration: none;
    background-color: transparent;
    outline: none;
    cursor: pointer;
    -webkit-transition: color .3s;
    transition: color .3s;
    -webkit-text-decoration-skip: objects;
}
[role=button], a, area, button, input:not([type=range]), label, select, summary, textarea {
    -ms-touch-action: manipulation;
    touch-action: manipulation;
}
a {
    color: #0681d0;
}
code, kbd, pre, samp {
    font-size: 1em;
    font-family: "SFMono-Regular",Consolas,"Liberation Mono",Menlo,Courier,monospace;
}
pre {
    margin-top: 0px;
    margin-bottom: 1em;
    overflow: auto;
}
._2rhmJa code {
    padding: 2px 4px;
    border: none;
    vertical-align: middle;
    white-space: pre-wrap;
}
code[class*=language-], pre[class*=language-] {
    color: #ccc;
    background: none;
    font-family: Consolas,Monaco,"Andale Mono","Ubuntu Mono",monospace;
    font-size: 1em;
    text-align: left;
    white-space: pre;
    word-spacing: normal;
    word-break: normal;
    word-wrap: normal;
    line-height: 1.5;
    -moz-tab-size: 4;
    -o-tab-size: 4;
    tab-size: 4;
    -webkit-hyphens: none;
    -moz-hyphens: none;
    -ms-hyphens: none;
    hyphens: none;
}
pre[class*=language-] {
    padding: 1em;
    margin: .5em 0;
    overflow: auto;
}
:not(pre) > code[class*=language-], pre[class*=language-] {
    background: #2d2d2d;
}
._2rhmJa code, ._2rhmJa pre, ._2rhmJa pre[class*=language-] {
    font-family: Consolas,Monaco,"Andale Mono","Ubuntu Mono",monospace;
    font-size: 12px;
}
._2rhmJa pre, ._2rhmJa pre[class*=language-] {
    word-wrap: normal;
    word-break: break-all;
    white-space: pre;
    overflow-x: scroll;
    overscroll-behavior-x: contain;
    margin-top: 0px;
    margin-bottom: 20px;
    border-radius: 4px;
    z-index: 0;
    padding: 1em;
    line-height: 1.5;
    color: #ccc;
    background: #2d2d2d;
}
._2rhmJa :not(pre) code {
    color: #c7254e;
    background-color: #f2f2f2;
}
._2rhmJa table th {
    font-weight: bold;
}
._2rhmJa table thead th {
    vertical-align: middle;
    text-align: inherit;
}
img {
    vertical-align: middle;
    border-style: none;
}
._2rhmJa img {
    max-width: 100%;
}
._2rhmJa [mathimg='1'].math-inline {
    display: inline;
    margin: 0 3px;
    vertical-align: middle;
}
._2rhmJa [mathimg='1'].math-block {
    display: block;
    margin: 1em auto;
}
._2rhmJa [mathimg='1'].math-block, ._2rhmJa [mathimg='1'].math-inline {
    max-width: 100%;
}
button, input, optgroup, select, textarea {
    margin: 0;
    color: inherit;
    font-size: inherit;
    font-family: inherit;
    line-height: inherit;
}
button, input {
    overflow: visible;
}
button, select {
    text-transform: none;
}
.VJbwyy {
    position: absolute;
    top: 6px;
    right: 6px;
    display: flex;
    justify-content: center;
    align-items: center;
    width: 32px;
    height: 24px;
    cursor: pointer;
    font-size: 14px;
    padding: 0;
    border: none;
    border-radius: 6px;
    color: #ccc;
    background-color: hsla(0, 0%, 90%, 0.2);
    box-shadow: 0px 2px 0px 0px rgba(0,0,0,0.25);
    opacity: 0;
    visibility: hidden;
    -webkit-user-select: none;
    -moz-user-select: none;
    -ms-user-select: none;
    user-select: none;
    transition: opacity .2s ease-in-out,visibility .2s ease-in-out;
    z-index: 1;
}
[type=reset], [type=submit], button, html [type=button] {
    -webkit-appearance: button;
}
[role=button], button {
    cursor: pointer;
    -webkit-user-select: none;
    -moz-user-select: none;
    -ms-user-select: none;
    user-select: none;
}
pre[class*=language-].line-numbers {
    position: relative;
    padding-left: 3.8em;
    counter-reset: linenumber;
}
._2rhmJa pre[class*=language-] code, ._2rhmJa pre code {
    padding: 0;
    background-color: transparent;
    color: inherit;
    white-space: pre;
    vertical-align: unset;
}
pre[class*=language-].line-numbers > code {
    position: relative;
    white-space: inherit;
}
.token.atrule, .token.builtin, .token.important, .token.keyword, .token.selector {
    color: #cc99cd;
}
.token.punctuation {
    color: #ccc;
}
.token.entity, .token.operator, .token.url {
    color: #67cdcc;
}
.token.boolean, .token.function, .token.number {
    color: #f08d49;
}
.line-numbers .line-numbers-rows {
    position: absolute;
    pointer-events: none;
    top: 0px;
    font-size: 100%;
    left: -3.8em;
    width: 3em;
    letter-spacing: -1px;
    border-right: 1px solid #999;
    -webkit-user-select: none;
    -moz-user-select: none;
    -ms-user-select: none;
    user-select: none;
}
.line-numbers-rows > span {
    pointer-events: none;
    display: block;
    counter-increment: linenumber;
}
.anticon {
    display: inline-block;
    color: inherit;
    font-style: normal;
    line-height: 0;
    text-align: center;
    text-transform: none;
    vertical-align: -0.12em;
    text-rendering: optimizeLegibility;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
}
.anticon > * {
    line-height: 1;
}
svg:not(:root) {
    overflow: hidden;
}
.anticon svg {
    display: inline-block;
}
._2rhmJa ol li, ._2rhmJa ul li {
    line-height: 30px;
}
.token.class-name, .token.constant, .token.property, .token.symbol {
    color: #f8c555;
}
.token.attr-value, .token.char, .token.regex, .token.string, .token.variable {
    color: #7ec699;
}
._2rhmJa ol li ol, ._2rhmJa ol li ul, ._2rhmJa ul li ol, ._2rhmJa ul li ul {
    margin-top: 16px;
}
</style>
</head>
<body><div id="__next"><div class="_21bLU4 _3kbg6I"><div class="_3VRLsv" role="main"><div class="_gp-ck"><section class="ouvJEz"><article class="_2rhmJa">
<hr>
<table>
<thead>
<tr>
<th style="text-align:center">Author</th>
<th style="text-align:left">shaniadolphin</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">e-mail</td>
<td style="text-align:left"><a href="mailto:349948204@qq.com" target="_blank" rel="nofollow">349948204@qq.com</a></td>
</tr>
<tr>
<td style="text-align:center">github</td>
<td style="text-align:left"><a href="https://github.com/shaniadolphin/" target="_blank" rel="nofollow">https://github.com/shaniadolphin/</a></td>
</tr>
</tbody>
</table>
<h3>大括号</h3>
<p>  由于大括号<code>{}</code> 被用于分组，因此需要使用<code>\{</code>和<code>\}</code>表示大括号，也可以使用<code>\lbrace</code> 和<code>\rbrace</code>来表示。如<code>$\{a\*b\}:a\∗b$</code> 或<code>$\lbrace a\*b\rbrace :a\*b$</code> 表示<img class="math-inline" alt="\{a*b\}:a∗b" src="https://math.jianshu.com/math?formula=%5C%7Ba*b%5C%7D%3Aa%E2%88%97b" mathimg="1">。</p>
<h3>尖括号</h3>
<p>  区分于小于号和大于号，使用<code>\langle</code> 和<code>\rangle</code> 表示左尖括号和右尖括号。如<code>$\langle x \rangle$</code> 表示：<img class="math-inline" alt="\langle x \rangle" src="https://math.jianshu.com/math?formula=%5Clangle%20x%20%5Crangle" mathimg="1">。</p>
<h3>上取整</h3>
<p>  使用<code>\lceil</code> 和 <code>\rceil</code> 表示。 如，<code>$\lceil x \rceil$</code>：<img class="math-inline" alt="\lceil x \rceil" src="https://math.jianshu.com/math?formula=%5Clceil%20x%20%5Crceil" mathimg="1">。</p>
<h3>下取整</h3>
<p>  使用<code>\lfloor</code> 和 <code>\rfloor</code> 表示。如，<code>$\lfloor x \rfloor$</code>：<img class="math-inline" alt="\lfloor x \rfloor" src="https://math.jianshu.com/math?formula=%5Clfloor%20x%20%5Crfloor" mathimg="1">。</p>
<h2><strong>求和与积分</strong></h2>
<h3>求和</h3>
<p>  <code>\sum</code> 用来表示求和符号，其下标表示求和下限，上标表示上限。如:<br>
  <code>$\sum_{r=1}^n$</code>表示：<img class="math-inline" alt="\sum_{r=1}^n" src="https://math.jianshu.com/math?formula=%5Csum_%7Br%3D1%7D%5En" mathimg="1">。<br>
  <code>$$\sum_{r=1}^n$$</code>表示：<img class="math-block" alt="\sum_{r=1}^n" src="https://math.jianshu.com/math?formula=%5Csum_%7Br%3D1%7D%5En" mathimg="1"></p>
<h3>积分</h3>
<p>  <code>\int</code> 用来表示积分符号，同样地，其上下标表示积分的上下限。如，<code>$\int_{r=1}^\infty$</code>：<img class="math-inline" alt="\int_{r=1}^\infty" src="https://math.jianshu.com/math?formula=%5Cint_%7Br%3D1%7D%5E%5Cinfty" mathimg="1">。<br>
  多重积分同样使用 <strong>int</strong> ，通过 <strong>i</strong> 的数量表示积分导数：<br>
  <code>$\iint$</code> ：<img class="math-inline" alt="\iint" src="https://math.jianshu.com/math?formula=%5Ciint" mathimg="1"><br>
  <code>$\iiint$</code> ：<img class="math-inline" alt="\iiint" src="https://math.jianshu.com/math?formula=%5Ciiint" mathimg="1"><br>
  <code>$\iiiint$</code> ：<img class="math-inline" alt="\iiiint" src="https://math.jianshu.com/math?formula=%5Ciiiint" mathimg="1"></p>
<h3>连乘</h3>
<p>  <code>$\prod {a+b}$</code>，输出：<img class="math-inline" alt="\prod {a+b}" src="https://math.jianshu.com/math?formula=%5Cprod%20%7Ba%2Bb%7D" mathimg="1">。<br>
  <code>$\prod_{i=1}^{K}$</code>，输出：<img class="math-inline" alt="\prod_{i=1}^{K}" src="https://math.jianshu.com/math?formula=%5Cprod_%7Bi%3D1%7D%5E%7BK%7D" mathimg="1">。<br>
  <code>$$\prod_{i=1}^{K}$$</code>，输出：<img class="math-inline" alt="\prod_{i=1}^{K}" src="https://math.jianshu.com/math?formula=%5Cprod_%7Bi%3D1%7D%5E%7BK%7D" mathimg="1">。</p>
<h3>其他</h3>
<p>  与此类似的符号还有，<br>
  <code>$\prod$</code> ：<img class="math-inline" alt="\prod" src="https://math.jianshu.com/math?formula=%5Cprod" mathimg="1"><br>
  <code>$\bigcup$</code> ：<img class="math-inline" alt="\bigcup" src="https://math.jianshu.com/math?formula=%5Cbigcup" mathimg="1"><br>
  <code>$\bigcap$</code> ：<img class="math-inline" alt="\bigcap" src="https://math.jianshu.com/math?formula=%5Cbigcap" mathimg="1"><br>
  <code>$arg\,\max_{c_k}$</code>：<img class="math-inline" alt="arg\,\max_{c_k}" src="https://math.jianshu.com/math?formula=arg%5C%2C%5Cmax_%7Bc_k%7D" mathimg="1"><br>
  <code>$arg\,\min_{c_k}$</code>：<img class="math-inline" alt="arg\,\min_{c_k}" src="https://math.jianshu.com/math?formula=arg%5C%2C%5Cmin_%7Bc_k%7D" mathimg="1"><br>
  <code>$\mathop {argmin}_{c_k}$</code>：<img class="math-inline" alt="\mathop {argmin}_{c_k}" src="https://math.jianshu.com/math?formula=%5Cmathop%20%7Bargmin%7D_%7Bc_k%7D" mathimg="1"><br>
  <code>$\mathop {argmax}_{c_k}$</code>：<img class="math-inline" alt="\mathop {argmax}_{c_k}" src="https://math.jianshu.com/math?formula=%5Cmathop%20%7Bargmax%7D_%7Bc_k%7D" mathimg="1"><br>
  <code>$\max_{c_k}$</code>：<img class="math-inline" alt="\max_{c_k}" src="https://math.jianshu.com/math?formula=%5Cmax_%7Bc_k%7D" mathimg="1"><br>
  <code>$\min_{c_k}$</code>：<img class="math-inline" alt="\min_{c_k}" src="https://math.jianshu.com/math?formula=%5Cmin_%7Bc_k%7D" mathimg="1"></p>
<h2><strong>分式与根式</strong></h2>
<h3>分式</h3>
<ul>
<li>第一种，使用<code>\frac ab</code>，<code>\frac</code>作用于其后的两个组<code>a</code> ，<code>b</code> ，结果为<img class="math-inline" alt="\frac ab" src="https://math.jianshu.com/math?formula=%5Cfrac%20ab" mathimg="1">。如果你的分子或分母不是单个字符，请使用<code>{..}</code>来分组，比如<code>$\frac {a+c+1}{b+c+2}$</code>表示<img class="math-inline" alt="\frac {a+c+1}{b+c+2}" src="https://math.jianshu.com/math?formula=%5Cfrac%20%7Ba%2Bc%2B1%7D%7Bb%2Bc%2B2%7D" mathimg="1">。</li>
<li>第二种，使用<code>\over</code>来分隔一个组的前后两部分，如<code>{a+1\over b+1}</code>：<img class="math-inline" alt="{a+1\over b+1}" src="https://math.jianshu.com/math?formula=%7Ba%2B1%5Cover%20b%2B1%7D" mathimg="1">
</li>
</ul>
<h3>连分数</h3>
<p>  书写连分数表达式时，请使用<code>\cfrac</code>代替<code>\frac</code>或者<code>\over</code>两者效果对比如下：<br>
  <code>\frac</code> 表示如下：</p>
<div class="_2Uzcx_"><button class="VJbwyy" aria-label="复制代码" type="button"><i class="anticon anticon-copy" aria-label="icon: copy"><svg xmlns="http://www.w3.org/2000/svg" class="" aria-hidden="true" fill="currentColor" viewbox="64 64 896 896" focusable="false" width="1em" height="1em" data-icon="copy"><path d="M 832 64 H 296 c -4.4 0 -8 3.6 -8 8 v 56 c 0 4.4 3.6 8 8 8 h 496 v 688 c 0 4.4 3.6 8 8 8 h 56 c 4.4 0 8 -3.6 8 -8 V 96 c 0 -17.7 -14.3 -32 -32 -32 Z M 704 192 H 192 c -17.7 0 -32 14.3 -32 32 v 530.7 c 0 8.5 3.4 16.6 9.4 22.6 l 173.3 173.3 c 2.2 2.2 4.7 4 7.4 5.5 v 1.9 h 4.2 c 3.5 1.3 7.2 2 11 2 H 704 c 17.7 0 32 -14.3 32 -32 V 224 c 0 -17.7 -14.3 -32 -32 -32 Z M 350 856.2 L 263.9 770 H 350 v 86.2 Z M 664 888 H 414 V 746 c 0 -22.1 -17.9 -40 -40 -40 H 232 V 264 h 432 v 624 Z"/></svg></i></button><pre class="line-numbers  language-ruby"><code class="  language-ruby"><span class="token variable">$$x</span><span class="token operator">=</span>a_0 <span class="token operator">+</span> \frac <span class="token punctuation">{</span><span class="token number">1</span><span class="token operator">^</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">{</span>a_1 <span class="token operator">+</span> \frac <span class="token punctuation">{</span><span class="token number">2</span><span class="token operator">^</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">{</span>a_2 <span class="token operator">+</span> \frac <span class="token punctuation">{</span><span class="token number">3</span><span class="token operator">^</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">{</span>a_3 <span class="token operator">+</span> \frac <span class="token punctuation">{</span><span class="token number">4</span><span class="token operator">^</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">{</span>a_4 <span class="token operator">+</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span>$$
<span class="line-numbers-rows" aria-hidden="true"><span></span></span></code></pre></div>
<p>  显示如下：<br>
<img class="math-block" alt="x=a_0 + \frac {1^2}{a_1 + \frac {2^2}{a_2 + \frac {3^2}{a_3 + \frac {4^2}{a_4 + ...}}}}" src="https://math.jianshu.com/math?formula=x%3Da_0%20%2B%20%5Cfrac%20%7B1%5E2%7D%7Ba_1%20%2B%20%5Cfrac%20%7B2%5E2%7D%7Ba_2%20%2B%20%5Cfrac%20%7B3%5E2%7D%7Ba_3%20%2B%20%5Cfrac%20%7B4%5E2%7D%7Ba_4%20%2B%20...%7D%7D%7D%7D" mathimg="1"><br>
  <code>\cfrac</code> 表示如下：</p>
<div class="_2Uzcx_"><button class="VJbwyy" aria-label="复制代码" type="button"><i class="anticon anticon-copy" aria-label="icon: copy"><svg xmlns="http://www.w3.org/2000/svg" class="" aria-hidden="true" fill="currentColor" viewbox="64 64 896 896" focusable="false" width="1em" height="1em" data-icon="copy"><path d="M 832 64 H 296 c -4.4 0 -8 3.6 -8 8 v 56 c 0 4.4 3.6 8 8 8 h 496 v 688 c 0 4.4 3.6 8 8 8 h 56 c 4.4 0 8 -3.6 8 -8 V 96 c 0 -17.7 -14.3 -32 -32 -32 Z M 704 192 H 192 c -17.7 0 -32 14.3 -32 32 v 530.7 c 0 8.5 3.4 16.6 9.4 22.6 l 173.3 173.3 c 2.2 2.2 4.7 4 7.4 5.5 v 1.9 h 4.2 c 3.5 1.3 7.2 2 11 2 H 704 c 17.7 0 32 -14.3 32 -32 V 224 c 0 -17.7 -14.3 -32 -32 -32 Z M 350 856.2 L 263.9 770 H 350 v 86.2 Z M 664 888 H 414 V 746 c 0 -22.1 -17.9 -40 -40 -40 H 232 V 264 h 432 v 624 Z"/></svg></i></button><pre class="line-numbers  language-ruby"><code class="  language-ruby"><span class="token variable">$$x</span><span class="token operator">=</span>a_0 <span class="token operator">+</span> \cfrac <span class="token punctuation">{</span><span class="token number">1</span><span class="token operator">^</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">{</span>a_1 <span class="token operator">+</span> \cfrac <span class="token punctuation">{</span><span class="token number">2</span><span class="token operator">^</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">{</span>a_2 <span class="token operator">+</span> \cfrac <span class="token punctuation">{</span><span class="token number">3</span><span class="token operator">^</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">{</span>a_3 <span class="token operator">+</span> \cfrac <span class="token punctuation">{</span><span class="token number">4</span><span class="token operator">^</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">{</span>a_4 <span class="token operator">+</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span>$$
<span class="line-numbers-rows" aria-hidden="true"><span></span></span></code></pre></div>
<p>  显示如下：<br>
<img class="math-block" alt="x=a_0 + \cfrac {1^2}{a_1 + \cfrac {2^2}{a_2 + \cfrac {3^2}{a_3 + \cfrac {4^2}{a_4 + ...}}}}" src="https://math.jianshu.com/math?formula=x%3Da_0%20%2B%20%5Ccfrac%20%7B1%5E2%7D%7Ba_1%20%2B%20%5Ccfrac%20%7B2%5E2%7D%7Ba_2%20%2B%20%5Ccfrac%20%7B3%5E2%7D%7Ba_3%20%2B%20%5Ccfrac%20%7B4%5E2%7D%7Ba_4%20%2B%20...%7D%7D%7D%7D" mathimg="1"></p>
<h3>根式</h3>
<p>  根式使用<code>\sqrt</code> 来表示。<br>
  如开4次方：<code>$\sqrt[4]{\frac xy}$</code> ：<img class="math-inline" alt="\sqrt[4]{\frac xy}" src="https://math.jianshu.com/math?formula=%5Csqrt%5B4%5D%7B%5Cfrac%20xy%7D" mathimg="1">。<br>
  开平方：<code>$\sqrt {a+b}$</code>：<img class="math-inline" alt="\sqrt {a+b}" src="https://math.jianshu.com/math?formula=%5Csqrt%20%7Ba%2Bb%7D" mathimg="1">。</p>
<h2><strong>多行表达式</strong></h2>
<h3>分类表达式</h3>
<p>  定义函数的时候经常需要分情况给出表达式，使用<code>\begin{cases}…\end{cases}</code> 。其中：</p>
<ul>
<li>  使用<code>\\</code> 来分类，</li>
<li>  使用<code>&amp;</code> 指示需要对齐的位置，</li>
<li>  使用<code>\</code> +<code>空格</code>表示空格。</li>
</ul>
<div class="_2Uzcx_"><button class="VJbwyy" aria-label="复制代码" type="button"><i class="anticon anticon-copy" aria-label="icon: copy"><svg xmlns="http://www.w3.org/2000/svg" class="" aria-hidden="true" fill="currentColor" viewbox="64 64 896 896" focusable="false" width="1em" height="1em" data-icon="copy"><path d="M 832 64 H 296 c -4.4 0 -8 3.6 -8 8 v 56 c 0 4.4 3.6 8 8 8 h 496 v 688 c 0 4.4 3.6 8 8 8 h 56 c 4.4 0 8 -3.6 8 -8 V 96 c 0 -17.7 -14.3 -32 -32 -32 Z M 704 192 H 192 c -17.7 0 -32 14.3 -32 32 v 530.7 c 0 8.5 3.4 16.6 9.4 22.6 l 173.3 173.3 c 2.2 2.2 4.7 4 7.4 5.5 v 1.9 h 4.2 c 3.5 1.3 7.2 2 11 2 H 704 c 17.7 0 32 -14.3 32 -32 V 224 c 0 -17.7 -14.3 -32 -32 -32 Z M 350 856.2 L 263.9 770 H 350 v 86.2 Z M 664 888 H 414 V 746 c 0 -22.1 -17.9 -40 -40 -40 H 232 V 264 h 432 v 624 Z"/></svg></i></button><pre class="line-numbers  language-ruby"><code class="  language-ruby">$$
f<span class="token punctuation">(</span>n<span class="token punctuation">)</span>
\<span class="token keyword">begin</span><span class="token punctuation">{</span>cases<span class="token punctuation">}</span>
\cfrac n2<span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token keyword">if</span>\ n\ is\ even\\
<span class="token number">3</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token keyword">if</span>\  n\ is\ odd
\<span class="token keyword">end</span><span class="token punctuation">{</span>cases<span class="token punctuation">}</span>
$$
<span class="line-numbers-rows" aria-hidden="true"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div>
<p>  表示:<br>
<img class="math-block" alt="f(n) \begin{cases} \cfrac n2, &amp;if\ n\ is\ even\\ 3n + 1, &amp;if\ n\ is\ odd \end{cases}" src="https://math.jianshu.com/math?formula=f(n)%20%5Cbegin%7Bcases%7D%20%5Ccfrac%20n2%2C%20%26if%5C%20n%5C%20is%5C%20even%5C%5C%203n%20%2B%201%2C%20%26if%5C%20n%5C%20is%5C%20odd%20%5Cend%7Bcases%7D" mathimg="1"></p>
<div class="_2Uzcx_"><button class="VJbwyy" aria-label="复制代码" type="button"><i class="anticon anticon-copy" aria-label="icon: copy"><svg xmlns="http://www.w3.org/2000/svg" class="" aria-hidden="true" fill="currentColor" viewbox="64 64 896 896" focusable="false" width="1em" height="1em" data-icon="copy"><path d="M 832 64 H 296 c -4.4 0 -8 3.6 -8 8 v 56 c 0 4.4 3.6 8 8 8 h 496 v 688 c 0 4.4 3.6 8 8 8 h 56 c 4.4 0 8 -3.6 8 -8 V 96 c 0 -17.7 -14.3 -32 -32 -32 Z M 704 192 H 192 c -17.7 0 -32 14.3 -32 32 v 530.7 c 0 8.5 3.4 16.6 9.4 22.6 l 173.3 173.3 c 2.2 2.2 4.7 4 7.4 5.5 v 1.9 h 4.2 c 3.5 1.3 7.2 2 11 2 H 704 c 17.7 0 32 -14.3 32 -32 V 224 c 0 -17.7 -14.3 -32 -32 -32 Z M 350 856.2 L 263.9 770 H 350 v 86.2 Z M 664 888 H 414 V 746 c 0 -22.1 -17.9 -40 -40 -40 H 232 V 264 h 432 v 624 Z"/></svg></i></button><pre class="line-numbers  language-ruby"><code class="  language-ruby">$$
<span class="token constant">L</span><span class="token punctuation">(</span><span class="token constant">Y</span><span class="token punctuation">,</span>f<span class="token punctuation">(</span><span class="token constant">X</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=</span>
\<span class="token keyword">begin</span><span class="token punctuation">{</span>cases<span class="token punctuation">}</span>
<span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span> \text<span class="token punctuation">{</span><span class="token constant">Y</span> <span class="token operator">=</span> f<span class="token punctuation">(</span><span class="token constant">X</span><span class="token punctuation">)</span><span class="token punctuation">}</span>  \\
<span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span> \text<span class="token punctuation">{</span><span class="token constant">Y</span> $\neq$ f<span class="token punctuation">(</span><span class="token constant">X</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
\<span class="token keyword">end</span><span class="token punctuation">{</span>cases<span class="token punctuation">}</span>
$$
<span class="line-numbers-rows" aria-hidden="true"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div>
<p>  表示:<br>
<img class="math-block" alt="L(Y,f(X)) = \begin{cases} 0, &amp; \text{Y = f(X)} \\ 1, &amp; \text{Y $\neq$ f(X)} \end{cases}" src="https://math.jianshu.com/math?formula=L(Y%2Cf(X))%20%3D%20%5Cbegin%7Bcases%7D%200%2C%20%26%20%5Ctext%7BY%20%3D%20f(X)%7D%20%5C%5C%201%2C%20%26%20%5Ctext%7BY%20%24%5Cneq%24%20f(X)%7D%20%5Cend%7Bcases%7D" mathimg="1"><br>
  如果想分类之间的垂直间隔变大，可以使用<code>\\[2ex]</code> 代替<code>\\</code> 来分隔不同的情况。(<code>3ex,4ex</code> 也可以用，<code>1ex</code> 相当于原始距离）。如下所示：</p>
<div class="_2Uzcx_"><button class="VJbwyy" aria-label="复制代码" type="button"><i class="anticon anticon-copy" aria-label="icon: copy"><svg xmlns="http://www.w3.org/2000/svg" class="" aria-hidden="true" fill="currentColor" viewbox="64 64 896 896" focusable="false" width="1em" height="1em" data-icon="copy"><path d="M 832 64 H 296 c -4.4 0 -8 3.6 -8 8 v 56 c 0 4.4 3.6 8 8 8 h 496 v 688 c 0 4.4 3.6 8 8 8 h 56 c 4.4 0 8 -3.6 8 -8 V 96 c 0 -17.7 -14.3 -32 -32 -32 Z M 704 192 H 192 c -17.7 0 -32 14.3 -32 32 v 530.7 c 0 8.5 3.4 16.6 9.4 22.6 l 173.3 173.3 c 2.2 2.2 4.7 4 7.4 5.5 v 1.9 h 4.2 c 3.5 1.3 7.2 2 11 2 H 704 c 17.7 0 32 -14.3 32 -32 V 224 c 0 -17.7 -14.3 -32 -32 -32 Z M 350 856.2 L 263.9 770 H 350 v 86.2 Z M 664 888 H 414 V 746 c 0 -22.1 -17.9 -40 -40 -40 H 232 V 264 h 432 v 624 Z"/></svg></i></button><pre class="line-numbers  language-ruby"><code class="  language-ruby">$$
<span class="token constant">L</span><span class="token punctuation">(</span><span class="token constant">Y</span><span class="token punctuation">,</span>f<span class="token punctuation">(</span><span class="token constant">X</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=</span>
\<span class="token keyword">begin</span><span class="token punctuation">{</span>cases<span class="token punctuation">}</span>
<span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span> \text<span class="token punctuation">{</span><span class="token constant">Y</span> <span class="token operator">=</span> f<span class="token punctuation">(</span><span class="token constant">X</span><span class="token punctuation">)</span><span class="token punctuation">}</span> \\<span class="token punctuation">[</span><span class="token number">5</span>ex<span class="token punctuation">]</span>
<span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span> \text<span class="token punctuation">{</span><span class="token constant">Y</span> $\neq$ f<span class="token punctuation">(</span><span class="token constant">X</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
\<span class="token keyword">end</span><span class="token punctuation">{</span>cases<span class="token punctuation">}</span>
$$
<span class="line-numbers-rows" aria-hidden="true"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div>
<p>  表示：<br>
<img class="math-block" alt="L(Y,f(X)) = \begin{cases} 0, &amp; \text{Y = f(X)} \\[5ex] 1, &amp; \text{Y $\neq$ f(X)} \end{cases}" src="https://math.jianshu.com/math?formula=L(Y%2Cf(X))%20%3D%20%5Cbegin%7Bcases%7D%200%2C%20%26%20%5Ctext%7BY%20%3D%20f(X)%7D%20%5C%5C%5B5ex%5D%201%2C%20%26%20%5Ctext%7BY%20%24%5Cneq%24%20f(X)%7D%20%5Cend%7Bcases%7D" mathimg="1"></p>
<h3>多行表达式</h3>
<p>  有时候需要将一行公式分多行进行显示。</p>
<div class="_2Uzcx_"><button class="VJbwyy" aria-label="复制代码" type="button"><i class="anticon anticon-copy" aria-label="icon: copy"><svg xmlns="http://www.w3.org/2000/svg" class="" aria-hidden="true" fill="currentColor" viewbox="64 64 896 896" focusable="false" width="1em" height="1em" data-icon="copy"><path d="M 832 64 H 296 c -4.4 0 -8 3.6 -8 8 v 56 c 0 4.4 3.6 8 8 8 h 496 v 688 c 0 4.4 3.6 8 8 8 h 56 c 4.4 0 8 -3.6 8 -8 V 96 c 0 -17.7 -14.3 -32 -32 -32 Z M 704 192 H 192 c -17.7 0 -32 14.3 -32 32 v 530.7 c 0 8.5 3.4 16.6 9.4 22.6 l 173.3 173.3 c 2.2 2.2 4.7 4 7.4 5.5 v 1.9 h 4.2 c 3.5 1.3 7.2 2 11 2 H 704 c 17.7 0 32 -14.3 32 -32 V 224 c 0 -17.7 -14.3 -32 -32 -32 Z M 350 856.2 L 263.9 770 H 350 v 86.2 Z M 664 888 H 414 V 746 c 0 -22.1 -17.9 -40 -40 -40 H 232 V 264 h 432 v 624 Z"/></svg></i></button><pre class="line-numbers  language-ruby"><code class="  language-ruby">$$
\<span class="token keyword">begin</span><span class="token punctuation">{</span>equation<span class="token punctuation">}</span>\<span class="token keyword">begin</span><span class="token punctuation">{</span>split<span class="token punctuation">}</span> 
a<span class="token operator">&amp;</span><span class="token operator">=</span>b<span class="token operator">+</span>c<span class="token operator">-</span>d \\ 
<span class="token operator">&amp;</span>\quad <span class="token operator">+</span>e<span class="token operator">-</span>f\\ 
<span class="token operator">&amp;</span><span class="token operator">=</span>g<span class="token operator">+</span>h\\ 
<span class="token operator">&amp;</span> <span class="token operator">=</span>i 
\<span class="token keyword">end</span><span class="token punctuation">{</span>split<span class="token punctuation">}</span>\<span class="token keyword">end</span><span class="token punctuation">{</span>equation<span class="token punctuation">}</span>
$$
<span class="line-numbers-rows" aria-hidden="true"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div>
<p>  表示：<br>
<img class="math-block" alt="\begin{equation}\begin{split} a&amp;=b+c-d \\ &amp;\quad +e-f\\ &amp;=g+h\\ &amp; =i \end{split}\end{equation}" src="https://math.jianshu.com/math?formula=%5Cbegin%7Bequation%7D%5Cbegin%7Bsplit%7D%20a%26%3Db%2Bc-d%20%5C%5C%20%26%5Cquad%20%2Be-f%5C%5C%20%26%3Dg%2Bh%5C%5C%20%26%20%3Di%20%5Cend%7Bsplit%7D%5Cend%7Bequation%7D" mathimg="1"><br>
  其中<code>begin{equation}</code> 表示开始方程，<code>end{equation}</code> 表示方程结束；<code>begin{split}</code> 表示开始多行公式，<code>end{split}</code> 表示结束；公式中用<code>\\</code> 表示回车到下一行，<code>&amp;</code> 表示对齐的位置。</p>
<h3>方程组</h3>
<p>  使用<code>\begin{array}...\end{array}</code> 与<code>\left \{</code> 与<code>\right.</code> 配合表示方程组:</p>
<div class="_2Uzcx_"><button class="VJbwyy" aria-label="复制代码" type="button"><i class="anticon anticon-copy" aria-label="icon: copy"><svg xmlns="http://www.w3.org/2000/svg" class="" aria-hidden="true" fill="currentColor" viewbox="64 64 896 896" focusable="false" width="1em" height="1em" data-icon="copy"><path d="M 832 64 H 296 c -4.4 0 -8 3.6 -8 8 v 56 c 0 4.4 3.6 8 8 8 h 496 v 688 c 0 4.4 3.6 8 8 8 h 56 c 4.4 0 8 -3.6 8 -8 V 96 c 0 -17.7 -14.3 -32 -32 -32 Z M 704 192 H 192 c -17.7 0 -32 14.3 -32 32 v 530.7 c 0 8.5 3.4 16.6 9.4 22.6 l 173.3 173.3 c 2.2 2.2 4.7 4 7.4 5.5 v 1.9 h 4.2 c 3.5 1.3 7.2 2 11 2 H 704 c 17.7 0 32 -14.3 32 -32 V 224 c 0 -17.7 -14.3 -32 -32 -32 Z M 350 856.2 L 263.9 770 H 350 v 86.2 Z M 664 888 H 414 V 746 c 0 -22.1 -17.9 -40 -40 -40 H 232 V 264 h 432 v 624 Z"/></svg></i></button><pre class="line-numbers  language-ruby"><code class="  language-ruby">$$
\left \<span class="token punctuation">{</span> 
\<span class="token keyword">begin</span><span class="token punctuation">{</span>array<span class="token punctuation">}</span><span class="token punctuation">{</span>c<span class="token punctuation">}</span>
a_1x<span class="token operator">+</span>b_1y<span class="token operator">+</span>c_1z<span class="token operator">=</span>d_1 \\ 
a_2x<span class="token operator">+</span>b_2y<span class="token operator">+</span>c_2z<span class="token operator">=</span>d_2 \\ 
a_3x<span class="token operator">+</span>b_3y<span class="token operator">+</span>c_3z<span class="token operator">=</span>d_3
\<span class="token keyword">end</span><span class="token punctuation">{</span>array<span class="token punctuation">}</span>
\right<span class="token punctuation">.</span>
$$
<span class="line-numbers-rows" aria-hidden="true"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div>
<p>  表示：<br>
<img class="math-block" alt="\left \{ \begin{array}{c} a_1x+b_1y+c_1z=d_1 \\ a_2x+b_2y+c_2z=d_2 \\ a_3x+b_3y+c_3z=d_3 \end{array} \right." src="https://math.jianshu.com/math?formula=%5Cleft%20%5C%7B%20%5Cbegin%7Barray%7D%7Bc%7D%20a_1x%2Bb_1y%2Bc_1z%3Dd_1%20%5C%5C%20a_2x%2Bb_2y%2Bc_2z%3Dd_2%20%5C%5C%20a_3x%2Bb_3y%2Bc_3z%3Dd_3%20%5Cend%7Barray%7D%20%5Cright." mathimg="1"><br>
  注意：通常MathJax通过内部策略自己管理公式内部的空间，因此<code>a…b</code> 与<code>a…….b</code> （<code>.</code>表示空格）都会显示为<code>ab</code> 。可以通过在<code>ab</code> 间加入<code>\</code> ,增加些许间隙，<code>\;</code> 增加较宽的间隙，<code>\quad</code>  与<code>\qquad</code> 会增加更大的间隙。</p>
<h2><strong>特殊函数与符号</strong></h2>
<h3>三角函数</h3>
<p>  <code>\snx$</code> : <img class="math-inline" alt="sinx" src="https://math.jianshu.com/math?formula=sinx" mathimg="1"><br>
  <code>\arctanx</code> : <img class="math-inline" alt="arctanx" src="https://math.jianshu.com/math?formula=arctanx" mathimg="1"></p>
<h3>比较运算符</h3>
<p>  小于(<code>\lt</code> )：<img class="math-inline" alt="\lt" src="https://math.jianshu.com/math?formula=%5Clt" mathimg="1"><br>
  大于(<code>\gt</code> )：<img class="math-inline" alt="\gt" src="https://math.jianshu.com/math?formula=%5Cgt" mathimg="1"><br>
  小于等于(<code>\le</code> )：<img class="math-inline" alt="\le" src="https://math.jianshu.com/math?formula=%5Cle" mathimg="1"><br>
  大于等于(<code>\ge</code> )：<img class="math-inline" alt="\ge" src="https://math.jianshu.com/math?formula=%5Cge" mathimg="1"><br>
  不等于(<code>\ne</code> ) : <img class="math-inline" alt="\ne" src="https://math.jianshu.com/math?formula=%5Cne" mathimg="1"><br>
  可以在这些运算符前面加上<code>\not</code> ，如<code>\not\lt</code> : <img class="math-inline" alt="\not\lt`" src="https://math.jianshu.com/math?formula=%5Cnot%5Clt%60" mathimg="1"></p>
<h3>集合关系与运算</h3>
<p>  并集(<code>\cup</code> ): <img class="math-inline" alt="\cup" src="https://math.jianshu.com/math?formula=%5Ccup" mathimg="1"><br>
  交集(<code>\cap</code> ): <img class="math-inline" alt="\cap" src="https://math.jianshu.com/math?formula=%5Ccap" mathimg="1"><br>
  差集(<code>\setminus</code> ): <img class="math-inline" alt="\setminus" src="https://math.jianshu.com/math?formula=%5Csetminus" mathimg="1"><br>
  子集(<code>\subset</code> ): <img class="math-inline" alt="\subset" src="https://math.jianshu.com/math?formula=%5Csubset" mathimg="1"><br>
  子集(<code>\subseteq</code> ): <img class="math-inline" alt="\subseteq" src="https://math.jianshu.com/math?formula=%5Csubseteq" mathimg="1"><br>
  非子集(<code>\subsetneq</code> ): <img class="math-inline" alt="\subsetneq" src="https://math.jianshu.com/math?formula=%5Csubsetneq" mathimg="1"><br>
  父集(<code>\supset</code> ): <img class="math-inline" alt="\supset" src="https://math.jianshu.com/math?formula=%5Csupset" mathimg="1"><br>
  属于(<code>\in</code> ): <img class="math-inline" alt="\in" src="https://math.jianshu.com/math?formula=%5Cin" mathimg="1"><br>
  不属于(<code>\notin</code> ): <img class="math-inline" alt="\notin" src="https://math.jianshu.com/math?formula=%5Cnotin" mathimg="1"><br>
  空集(<code>\emptyset</code> ): <img class="math-inline" alt="\emptyset" src="https://math.jianshu.com/math?formula=%5Cemptyset" mathimg="1"><br>
  空(<code>\varnothing</code> ): <img class="math-inline" alt="\varnothing" src="https://math.jianshu.com/math?formula=%5Cvarnothing" mathimg="1"></p>
<h3>排列</h3>
<p>  <code>\binom{n+1}{2k}</code> : <img class="math-inline" alt="\binom{n+1}{2k}" src="https://math.jianshu.com/math?formula=%5Cbinom%7Bn%2B1%7D%7B2k%7D" mathimg="1"><br>
  <code>{n+1 \choose 2k}</code> : <img class="math-inline" alt="{n+1 \choose 2k}" src="https://math.jianshu.com/math?formula=%7Bn%2B1%20%5Cchoose%202k%7D" mathimg="1"></p>
<h3>箭头</h3>
<p>  (<code>\to</code> ):<img class="math-inline" alt="\to" src="https://math.jianshu.com/math?formula=%5Cto" mathimg="1"><br>
  (<code>\rightarrow</code> ): <img class="math-inline" alt="\rightarrow" src="https://math.jianshu.com/math?formula=%5Crightarrow" mathimg="1"><br>
  (<code>\leftarrow</code> ): <img class="math-inline" alt="\leftarrow" src="https://math.jianshu.com/math?formula=%5Cleftarrow" mathimg="1"><br>
  (<code>\Rightarrow</code> ): <img class="math-inline" alt="\Rightarrow" src="https://math.jianshu.com/math?formula=%5CRightarrow" mathimg="1"><br>
  (<code>\Leftarrow</code> ): <img class="math-inline" alt="\Leftarrow" src="https://math.jianshu.com/math?formula=%5CLeftarrow" mathimg="1"><br>
  (<code>\mapsto</code> ): <img class="math-inline" alt="\mapsto" src="https://math.jianshu.com/math?formula=%5Cmapsto" mathimg="1"></p>
<h3>逻辑运算符</h3>
<p>  (<code>\land</code> ): <img class="math-inline" alt="\land" src="https://math.jianshu.com/math?formula=%5Cland" mathimg="1"><br>
  (<code>\lor</code> ): <img class="math-inline" alt="\lor" src="https://math.jianshu.com/math?formula=%5Clor" mathimg="1"><br>
  (<code>\lnot</code> ): <img class="math-inline" alt="\lnot" src="https://math.jianshu.com/math?formula=%5Clnot" mathimg="1"><br>
  (<code>\forall</code> ): <img class="math-inline" alt="\forall" src="https://math.jianshu.com/math?formula=%5Cforall" mathimg="1"><br>
  (<code>\exists</code> ): <img class="math-inline" alt="\exists" src="https://math.jianshu.com/math?formula=%5Cexists" mathimg="1"><br>
  (<code>\top</code> ): <img class="math-inline" alt="\top" src="https://math.jianshu.com/math?formula=%5Ctop" mathimg="1"><br>
  (<code>\bot</code> ): <img class="math-inline" alt="\bot" src="https://math.jianshu.com/math?formula=%5Cbot" mathimg="1"><br>
  (<code>\vdash</code> ): <img class="math-inline" alt="\vdash" src="https://math.jianshu.com/math?formula=%5Cvdash" mathimg="1"><br>
  (<code>\vDash</code> ): <img class="math-inline" alt="\vDash" src="https://math.jianshu.com/math?formula=%5CvDash" mathimg="1"></p>
<h3>操作符</h3>
<p>  (<code>\star</code> ): <img class="math-inline" alt="\star" src="https://math.jianshu.com/math?formula=%5Cstar" mathimg="1"><br>
  (<code>\ast</code> ): <img class="math-inline" alt="\ast" src="https://math.jianshu.com/math?formula=%5Cast" mathimg="1"><br>
  (<code>\oplus</code> ): <img class="math-inline" alt="\oplus" src="https://math.jianshu.com/math?formula=%5Coplus" mathimg="1"><br>
  (<code>\circ</code> ): <img class="math-inline" alt="\circ" src="https://math.jianshu.com/math?formula=%5Ccirc" mathimg="1"><br>
  (<code>\bullet</code> ): <img class="math-inline" alt="\bullet" src="https://math.jianshu.com/math?formula=%5Cbullet" mathimg="1"></p>
<h3>等于</h3>
<p>  (<code>\approx</code> ): <img class="math-inline" alt="\approx" src="https://math.jianshu.com/math?formula=%5Capprox" mathimg="1"><br>
  (<code>\sim</code> ): <img class="math-inline" alt="\sim" src="https://math.jianshu.com/math?formula=%5Csim" mathimg="1"><br>
  (<code>\equiv</code> ): <img class="math-inline" alt="\equiv" src="https://math.jianshu.com/math?formula=%5Cequiv" mathimg="1"><br>
  (<code>\prec</code> ): <img class="math-inline" alt="\prec" src="https://math.jianshu.com/math?formula=%5Cprec" mathimg="1"></p>
<h3>范围</h3>
<p>  (<code>\infty</code> ): <img class="math-inline" alt="\infty" src="https://math.jianshu.com/math?formula=%5Cinfty" mathimg="1"><br>
  (<code>\aleph_o</code> ): <img class="math-inline" alt="\aleph_o" src="https://math.jianshu.com/math?formula=%5Caleph_o" mathimg="1"><br>
  (<code>\nabla</code> ): <img class="math-inline" alt="\nabla" src="https://math.jianshu.com/math?formula=%5Cnabla" mathimg="1"><br>
  (<code>\Im</code> ): <img class="math-inline" alt="\Im" src="https://math.jianshu.com/math?formula=%5CIm" mathimg="1"><br>
  (<code>\Re</code> ): <img class="math-inline" alt="\Re" src="https://math.jianshu.com/math?formula=%5CRe" mathimg="1"></p>
<h3>模运算</h3>
<p>  (<code>\pmod</code> ): <img class="math-inline" alt="b \pmod n" src="https://math.jianshu.com/math?formula=b%20%5Cpmod%20n" mathimg="1"><br>
  如<code>a \equiv b \pmod n</code> : <img class="math-inline" alt="a \equiv b \pmod n" src="https://math.jianshu.com/math?formula=a%20%5Cequiv%20b%20%5Cpmod%20n" mathimg="1"></p>
<h3>点</h3>
<p>  (<code>\ldots</code> ): <img class="math-inline" alt="\ldots" src="https://math.jianshu.com/math?formula=%5Cldots" mathimg="1"><br>
  (<code>\cdots</code> ): <img class="math-inline" alt="\cdots" src="https://math.jianshu.com/math?formula=%5Ccdots" mathimg="1"><br>
  (<code>\cdot</code> ): <img class="math-inline" alt="\cdot" src="https://math.jianshu.com/math?formula=%5Ccdot" mathimg="1"><br>
  其区别是点的位置不同，<code>\ldots</code> 位置稍低，<code>\cdots</code> 位置居中。</p>
<div class="_2Uzcx_"><button class="VJbwyy" aria-label="复制代码" type="button"><i class="anticon anticon-copy" aria-label="icon: copy"><svg xmlns="http://www.w3.org/2000/svg" class="" aria-hidden="true" fill="currentColor" viewbox="64 64 896 896" focusable="false" width="1em" height="1em" data-icon="copy"><path d="M 832 64 H 296 c -4.4 0 -8 3.6 -8 8 v 56 c 0 4.4 3.6 8 8 8 h 496 v 688 c 0 4.4 3.6 8 8 8 h 56 c 4.4 0 8 -3.6 8 -8 V 96 c 0 -17.7 -14.3 -32 -32 -32 Z M 704 192 H 192 c -17.7 0 -32 14.3 -32 32 v 530.7 c 0 8.5 3.4 16.6 9.4 22.6 l 173.3 173.3 c 2.2 2.2 4.7 4 7.4 5.5 v 1.9 h 4.2 c 3.5 1.3 7.2 2 11 2 H 704 c 17.7 0 32 -14.3 32 -32 V 224 c 0 -17.7 -14.3 -32 -32 -32 Z M 350 856.2 L 263.9 770 H 350 v 86.2 Z M 664 888 H 414 V 746 c 0 -22.1 -17.9 -40 -40 -40 H 232 V 264 h 432 v 624 Z"/></svg></i></button><pre class="line-numbers  language-ruby"><code class="  language-ruby">$$
\<span class="token keyword">begin</span><span class="token punctuation">{</span>equation<span class="token punctuation">}</span>
a_1<span class="token operator">+</span>a_2<span class="token operator">+</span>\ldots<span class="token operator">+</span>a_n \\ 
a_1<span class="token operator">+</span>a_2<span class="token operator">+</span>\cdots<span class="token operator">+</span>a_n
\<span class="token keyword">end</span><span class="token punctuation">{</span>equation<span class="token punctuation">}</span>
$$
<span class="line-numbers-rows" aria-hidden="true"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div>
<p>  表示：<br>
<img class="math-block" alt="\begin{equation} a_1+a_2+\ldots+a_n \\ a_1+a_2+\cdots+a_n \end{equation}" src="https://math.jianshu.com/math?formula=%5Cbegin%7Bequation%7D%20a_1%2Ba_2%2B%5Cldots%2Ba_n%20%5C%5C%20a_1%2Ba_2%2B%5Ccdots%2Ba_n%20%5Cend%7Bequation%7D" mathimg="1"></p>
<h2><strong>顶部符号</strong></h2>
<p>  对于单字符，<code>\hat x</code> ：<img class="math-inline" alt="\hat x" src="https://math.jianshu.com/math?formula=%5Chat%20x" mathimg="1"><br>
  多字符可以使用<code>\widehat {xy}</code> ：<img class="math-inline" alt="\widehat {xy}" src="https://math.jianshu.com/math?formula=%5Cwidehat%20%7Bxy%7D" mathimg="1"><br>
  类似的还有:<br>
  (<code>\overline x</code> ): <img class="math-inline" alt="\overline x" src="https://math.jianshu.com/math?formula=%5Coverline%20x" mathimg="1"><br>
  矢量(<code>\vec</code> ): <img class="math-inline" alt="\vec x" src="https://math.jianshu.com/math?formula=%5Cvec%20x" mathimg="1"><br>
  向量(<code>\overrightarrow {xy}</code> ): <img class="math-inline" alt="\overrightarrow {xy}" src="https://math.jianshu.com/math?formula=%5Coverrightarrow%20%7Bxy%7D" mathimg="1"><br>
  (<code>\dot x</code> ): <img class="math-inline" alt="\dot x" src="https://math.jianshu.com/math?formula=%5Cdot%20x" mathimg="1"><br>
  (<code>\ddot x</code> ): <img class="math-inline" alt="\ddot x" src="https://math.jianshu.com/math?formula=%5Cddot%20x" mathimg="1"><br>
  (<code>\dot {\dot x}</code> ): <img class="math-inline" alt="\dot {\dot x}" src="https://math.jianshu.com/math?formula=%5Cdot%20%7B%5Cdot%20x%7D" mathimg="1"></p>
<h2><strong>表格</strong></h2>
<p>  使用<code>\begin{array}{列样式}…\end{array}</code> 这样的形式来创建表格，列样式可以是<code>clr</code> 表示居中，左，右对齐，还可以使用<code>|</code> 表示一条竖线。表格中各行使用<code>\\</code> 分隔，各列使用<code>&amp;</code> 分隔。使用<code>\hline</code> 在本行前加入一条直线。 例如:</p>
<div class="_2Uzcx_"><button class="VJbwyy" aria-label="复制代码" type="button"><i class="anticon anticon-copy" aria-label="icon: copy"><svg xmlns="http://www.w3.org/2000/svg" class="" aria-hidden="true" fill="currentColor" viewbox="64 64 896 896" focusable="false" width="1em" height="1em" data-icon="copy"><path d="M 832 64 H 296 c -4.4 0 -8 3.6 -8 8 v 56 c 0 4.4 3.6 8 8 8 h 496 v 688 c 0 4.4 3.6 8 8 8 h 56 c 4.4 0 8 -3.6 8 -8 V 96 c 0 -17.7 -14.3 -32 -32 -32 Z M 704 192 H 192 c -17.7 0 -32 14.3 -32 32 v 530.7 c 0 8.5 3.4 16.6 9.4 22.6 l 173.3 173.3 c 2.2 2.2 4.7 4 7.4 5.5 v 1.9 h 4.2 c 3.5 1.3 7.2 2 11 2 H 704 c 17.7 0 32 -14.3 32 -32 V 224 c 0 -17.7 -14.3 -32 -32 -32 Z M 350 856.2 L 263.9 770 H 350 v 86.2 Z M 664 888 H 414 V 746 c 0 -22.1 -17.9 -40 -40 -40 H 232 V 264 h 432 v 624 Z"/></svg></i></button><pre class="line-numbers  language-ruby"><code class="  language-ruby">$$
\<span class="token keyword">begin</span><span class="token punctuation">{</span>array<span class="token punctuation">}</span><span class="token punctuation">{</span>c<span class="token operator">|</span>lcr<span class="token punctuation">}</span>
n <span class="token operator">&amp;</span> \text<span class="token punctuation">{</span><span class="token constant">Left</span><span class="token punctuation">}</span> <span class="token operator">&amp;</span> \text<span class="token punctuation">{</span><span class="token constant">Center</span><span class="token punctuation">}</span> <span class="token operator">&amp;</span> \text<span class="token punctuation">{</span><span class="token constant">Right</span><span class="token punctuation">}</span> \\
\hline
<span class="token number">1</span> <span class="token operator">&amp;</span> <span class="token number">0.24</span> <span class="token operator">&amp;</span> <span class="token number">1</span> <span class="token operator">&amp;</span> <span class="token number">125</span> \\
<span class="token number">2</span> <span class="token operator">&amp;</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;</span> <span class="token number">189</span> <span class="token operator">&amp;</span> <span class="token operator">-</span><span class="token number">8</span> \\
<span class="token number">3</span> <span class="token operator">&amp;</span> <span class="token operator">-</span><span class="token number">20</span> <span class="token operator">&amp;</span> <span class="token number">2000</span> <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token operator">+</span><span class="token number">10</span>i \\
\<span class="token keyword">end</span><span class="token punctuation">{</span>array<span class="token punctuation">}</span>
$$
<span class="line-numbers-rows" aria-hidden="true"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div>
<p>  得到：<br>
<img class="math-block" alt="\begin{array}{c|lcr} n &amp; \text{Left} &amp; \text{Center} &amp; \text{Right} \\ \hline 1 &amp; 0.24 &amp; 1 &amp; 125 \\ 2 &amp; -1 &amp; 189 &amp; -8 \\ 3 &amp; -20 &amp; 2000 &amp; 1+10i \\ \end{array}" src="https://math.jianshu.com/math?formula=%5Cbegin%7Barray%7D%7Bc%7Clcr%7D%20n%20%26%20%5Ctext%7BLeft%7D%20%26%20%5Ctext%7BCenter%7D%20%26%20%5Ctext%7BRight%7D%20%5C%5C%20%5Chline%201%20%26%200.24%20%26%201%20%26%20125%20%5C%5C%202%20%26%20-1%20%26%20189%20%26%20-8%20%5C%5C%203%20%26%20-20%20%26%202000%20%26%201%2B10i%20%5C%5C%20%5Cend%7Barray%7D" mathimg="1"></p>
<h2><strong>矩阵</strong></h2>
<h3>基本内容</h3>
<p>  使用<code>\begin{matrix}…\end{matrix}</code> 这样的形式来表示矩阵，在<code>\begin</code> 与<code>\end</code> 之间加入矩阵中的元素即可。矩阵的行之间使用<code>\\</code> 分隔，列之间使用<code>&amp;</code> 分隔，例如:</p>
<div class="_2Uzcx_"><button class="VJbwyy" aria-label="复制代码" type="button"><i class="anticon anticon-copy" aria-label="icon: copy"><svg xmlns="http://www.w3.org/2000/svg" class="" aria-hidden="true" fill="currentColor" viewbox="64 64 896 896" focusable="false" width="1em" height="1em" data-icon="copy"><path d="M 832 64 H 296 c -4.4 0 -8 3.6 -8 8 v 56 c 0 4.4 3.6 8 8 8 h 496 v 688 c 0 4.4 3.6 8 8 8 h 56 c 4.4 0 8 -3.6 8 -8 V 96 c 0 -17.7 -14.3 -32 -32 -32 Z M 704 192 H 192 c -17.7 0 -32 14.3 -32 32 v 530.7 c 0 8.5 3.4 16.6 9.4 22.6 l 173.3 173.3 c 2.2 2.2 4.7 4 7.4 5.5 v 1.9 h 4.2 c 3.5 1.3 7.2 2 11 2 H 704 c 17.7 0 32 -14.3 32 -32 V 224 c 0 -17.7 -14.3 -32 -32 -32 Z M 350 856.2 L 263.9 770 H 350 v 86.2 Z M 664 888 H 414 V 746 c 0 -22.1 -17.9 -40 -40 -40 H 232 V 264 h 432 v 624 Z"/></svg></i></button><pre class="line-numbers  language-ruby"><code class="  language-ruby">$$
\<span class="token keyword">begin</span><span class="token punctuation">{</span>matrix<span class="token punctuation">}</span>
<span class="token number">1</span> <span class="token operator">&amp;</span> x <span class="token operator">&amp;</span> x<span class="token operator">^</span><span class="token number">2</span> \\
<span class="token number">1</span> <span class="token operator">&amp;</span> y <span class="token operator">&amp;</span> y<span class="token operator">^</span><span class="token number">2</span> \\
<span class="token number">1</span> <span class="token operator">&amp;</span> z <span class="token operator">&amp;</span> z<span class="token operator">^</span><span class="token number">2</span> \\
\<span class="token keyword">end</span><span class="token punctuation">{</span>matrix<span class="token punctuation">}</span>
$$
<span class="line-numbers-rows" aria-hidden="true"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div>
<p>  得到：<br>
<img class="math-block" alt="\begin{matrix} 1 &amp; x &amp; x^2 \\ 1 &amp; y &amp; y^2 \\ 1 &amp; z &amp; z^2 \\ \end{matrix}" src="https://math.jianshu.com/math?formula=%5Cbegin%7Bmatrix%7D%201%20%26%20x%20%26%20x%5E2%20%5C%5C%201%20%26%20y%20%26%20y%5E2%20%5C%5C%201%20%26%20z%20%26%20z%5E2%20%5C%5C%20%5Cend%7Bmatrix%7D" mathimg="1"></p>
<h3>括号</h3>
<p>  如果要对矩阵加括号，可以像上文中提到的一样，使用<code>\left</code> 与<code>\right</code> 配合表示括号符号。也可以使用特殊的<code>matrix</code> 。即替换<code>\begin{matrix}…\end{matrix}</code> 中<code>matrix</code> 为<code>pmatrix</code> ，<code>bmatrix</code> ，<code>Bmatrix</code> ，<code>vmatrix</code> , <code>Vmatrix</code> 。</p>
<ol>
<li>pmatrix<code>$\begin{pmatrix}1 &amp; 2 \\ 3 &amp; 4\\ \end{pmatrix}$</code> : <img class="math-inline" alt="\begin{pmatrix}1 &amp; 2 \\ 3 &amp; 4\\ \end{pmatrix}" src="https://math.jianshu.com/math?formula=%5Cbegin%7Bpmatrix%7D1%20%26%202%20%5C%5C%203%20%26%204%5C%5C%20%5Cend%7Bpmatrix%7D" mathimg="1">
</li>
<li>bmatrix<code>$\begin{bmatrix}1 &amp; 2 \\ 3 &amp; 4\\ \end{bmatrix}$</code> : <img class="math-inline" alt="\begin{bmatrix}1 &amp; 2 \\ 3 &amp; 4\\ \end{bmatrix}" src="https://math.jianshu.com/math?formula=%5Cbegin%7Bbmatrix%7D1%20%26%202%20%5C%5C%203%20%26%204%5C%5C%20%5Cend%7Bbmatrix%7D" mathimg="1">
</li>
<li>Bmatrix<code>$\begin{Bmatrix}1 &amp; 2 \\ 3 &amp; 4\\ \end{Bmatrix}$</code> : <img class="math-inline" alt="\begin{Bmatrix}1 &amp; 2 \\ 3 &amp; 4\\ \end{Bmatrix}" src="https://math.jianshu.com/math?formula=%5Cbegin%7BBmatrix%7D1%20%26%202%20%5C%5C%203%20%26%204%5C%5C%20%5Cend%7BBmatrix%7D" mathimg="1">
</li>
<li>vmatrix<code>$\begin{vmatrix}1 &amp; 2 \\ 3 &amp; 4\\ \end{vmatrix}$</code> : <img class="math-inline" alt="\begin{vmatrix}1 &amp; 2 \\ 3 &amp; 4\\ \end{vmatrix}" src="https://math.jianshu.com/math?formula=%5Cbegin%7Bvmatrix%7D1%20%26%202%20%5C%5C%203%20%26%204%5C%5C%20%5Cend%7Bvmatrix%7D" mathimg="1">
</li>
<li>Vmatrix<code>$\begin{Vmatrix}1 &amp; 2 \\ 3 &amp; 4\\ \end{Vmatrix}$</code> : <img class="math-inline" alt="\begin{Vmatrix}1 &amp; 2 \\ 3 &amp; 4\\ \end{Vmatrix}" src="https://math.jianshu.com/math?formula=%5Cbegin%7BVmatrix%7D1%20%26%202%20%5C%5C%203%20%26%204%5C%5C%20%5Cend%7BVmatrix%7D" mathimg="1">
</li>
</ol>
<h3>元素省略</h3>
<p>  可以使用<code>\cdots</code> ：⋯，<code>\ddots</code>：⋱ ，<code>\vdots</code>：⋮ 来省略矩阵中的元素，如：</p>
<div class="_2Uzcx_"><button class="VJbwyy" aria-label="复制代码" type="button"><i class="anticon anticon-copy" aria-label="icon: copy"><svg xmlns="http://www.w3.org/2000/svg" class="" aria-hidden="true" fill="currentColor" viewbox="64 64 896 896" focusable="false" width="1em" height="1em" data-icon="copy"><path d="M 832 64 H 296 c -4.4 0 -8 3.6 -8 8 v 56 c 0 4.4 3.6 8 8 8 h 496 v 688 c 0 4.4 3.6 8 8 8 h 56 c 4.4 0 8 -3.6 8 -8 V 96 c 0 -17.7 -14.3 -32 -32 -32 Z M 704 192 H 192 c -17.7 0 -32 14.3 -32 32 v 530.7 c 0 8.5 3.4 16.6 9.4 22.6 l 173.3 173.3 c 2.2 2.2 4.7 4 7.4 5.5 v 1.9 h 4.2 c 3.5 1.3 7.2 2 11 2 H 704 c 17.7 0 32 -14.3 32 -32 V 224 c 0 -17.7 -14.3 -32 -32 -32 Z M 350 856.2 L 263.9 770 H 350 v 86.2 Z M 664 888 H 414 V 746 c 0 -22.1 -17.9 -40 -40 -40 H 232 V 264 h 432 v 624 Z"/></svg></i></button><pre class="line-numbers  language-ruby"><code class="  language-ruby">$$
\<span class="token keyword">begin</span><span class="token punctuation">{</span>pmatrix<span class="token punctuation">}</span>
<span class="token number">1</span><span class="token operator">&amp;</span>a_1<span class="token operator">&amp;</span>a_1<span class="token operator">^</span><span class="token number">2</span><span class="token operator">&amp;</span>\cdots<span class="token operator">&amp;</span>a_1<span class="token operator">^</span>n\\
<span class="token number">1</span><span class="token operator">&amp;</span>a_2<span class="token operator">&amp;</span>a_2<span class="token operator">^</span><span class="token number">2</span><span class="token operator">&amp;</span>\cdots<span class="token operator">&amp;</span>a_2<span class="token operator">^</span>n\\
\vdots<span class="token operator">&amp;</span>\vdots<span class="token operator">&amp;</span>\vdots<span class="token operator">&amp;</span>\ddots<span class="token operator">&amp;</span>\vdots\\
<span class="token number">1</span><span class="token operator">&amp;</span>a_m<span class="token operator">&amp;</span>a_m<span class="token operator">^</span><span class="token number">2</span><span class="token operator">&amp;</span>\cdots<span class="token operator">&amp;</span>a_m<span class="token operator">^</span>n\\
\<span class="token keyword">end</span><span class="token punctuation">{</span>pmatrix<span class="token punctuation">}</span>
$$
<span class="line-numbers-rows" aria-hidden="true"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div>
<p>  表示：<br>
<img class="math-block" alt="\begin{pmatrix} 1&amp;a_1&amp;a_1^2&amp;\cdots&amp;a_1^n\\ 1&amp;a_2&amp;a_2^2&amp;\cdots&amp;a_2^n\\ \vdots&amp;\vdots&amp;\vdots&amp;\ddots&amp;\vdots\\ 1&amp;a_m&amp;a_m^2&amp;\cdots&amp;a_m^n\\ \end{pmatrix}" src="https://math.jianshu.com/math?formula=%5Cbegin%7Bpmatrix%7D%201%26a_1%26a_1%5E2%26%5Ccdots%26a_1%5En%5C%5C%201%26a_2%26a_2%5E2%26%5Ccdots%26a_2%5En%5C%5C%20%5Cvdots%26%5Cvdots%26%5Cvdots%26%5Cddots%26%5Cvdots%5C%5C%201%26a_m%26a_m%5E2%26%5Ccdots%26a_m%5En%5C%5C%20%5Cend%7Bpmatrix%7D" mathimg="1"></p>
<h3>增广矩阵</h3>
<p>  增广矩阵需要使用前面的表格中使用到的<code>\begin{array} ... \end{array}</code> 来实现。</p>
<div class="_2Uzcx_"><button class="VJbwyy" aria-label="复制代码" type="button"><i class="anticon anticon-copy" aria-label="icon: copy"><svg xmlns="http://www.w3.org/2000/svg" class="" aria-hidden="true" fill="currentColor" viewbox="64 64 896 896" focusable="false" width="1em" height="1em" data-icon="copy"><path d="M 832 64 H 296 c -4.4 0 -8 3.6 -8 8 v 56 c 0 4.4 3.6 8 8 8 h 496 v 688 c 0 4.4 3.6 8 8 8 h 56 c 4.4 0 8 -3.6 8 -8 V 96 c 0 -17.7 -14.3 -32 -32 -32 Z M 704 192 H 192 c -17.7 0 -32 14.3 -32 32 v 530.7 c 0 8.5 3.4 16.6 9.4 22.6 l 173.3 173.3 c 2.2 2.2 4.7 4 7.4 5.5 v 1.9 h 4.2 c 3.5 1.3 7.2 2 11 2 H 704 c 17.7 0 32 -14.3 32 -32 V 224 c 0 -17.7 -14.3 -32 -32 -32 Z M 350 856.2 L 263.9 770 H 350 v 86.2 Z M 664 888 H 414 V 746 c 0 -22.1 -17.9 -40 -40 -40 H 232 V 264 h 432 v 624 Z"/></svg></i></button><pre class="line-numbers  language-swift"><code class="  language-swift">$$
\<span class="token keyword">left</span><span class="token punctuation">[</span>  \begin<span class="token punctuation">{</span>array<span class="token punctuation">}</span>  <span class="token punctuation">{</span>c c <span class="token operator">|</span> c<span class="token punctuation">}</span> <span class="token operator">%</span>这里的c表示数组中元素对其方式：c居中、r右对齐、l左对齐，竖线表示<span class="token number">2</span>、<span class="token number">3</span>列间插入竖线
<span class="token number">1</span> <span class="token operator">&amp;</span> <span class="token number">2</span> <span class="token operator">&amp;</span> <span class="token number">3</span> \\
\hline <span class="token operator">%</span>插入横线，如果去掉\hline就是增广矩阵
<span class="token number">4</span> <span class="token operator">&amp;</span> <span class="token number">5</span> <span class="token operator">&amp;</span> <span class="token number">6</span>
\end<span class="token punctuation">{</span>array<span class="token punctuation">}</span>  \<span class="token keyword">right</span><span class="token punctuation">]</span>
$$
<span class="line-numbers-rows" aria-hidden="true"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div>
<p>显示为：<br>
<img class="math-block" alt="\left[ \begin{array} {c c | c} 1 &amp; 2 &amp; 3 \\ \hline 4 &amp; 5 &amp; 6 \end{array} \right]" src="https://math.jianshu.com/math?formula=%5Cleft%5B%20%5Cbegin%7Barray%7D%20%7Bc%20c%20%7C%20c%7D%201%20%26%202%20%26%203%20%5C%5C%20%5Chline%204%20%26%205%20%26%206%20%5Cend%7Barray%7D%20%5Cright%5D" mathimg="1"></p>
<h2><strong>公式标记与引用</strong></h2>
<p>  使用<code>\tag{yourtag}</code> 来标记公式，如果想在之后引用该公式，则还需要加上<code>\label{yourlabel}</code> 在<code>\tag</code> 之后，如<code>$$a = x^2 - y^3 \tag{1}\label{1}$$</code> 显示为：<br>
<img class="math-block" alt="a := x^2 - y^3 \tag{1}\label{311}" src="https://math.jianshu.com/math?formula=a%20%3A%3D%20x%5E2%20-%20y%5E3%20%5Ctag%7B1%7D%5Clabel%7B311%7D" mathimg="1"><br>
  如果不需要被引用，只使用<code>\tag{yourtag}</code> ，<code>$$x+y=z\tag{1.1}$$</code>显示为：<br>
<img class="math-block" alt="x+y=z\tag{1.1}" src="https://math.jianshu.com/math?formula=x%2By%3Dz%5Ctag%7B1.1%7D" mathimg="1"><br>
  <code>\tab{yourtab}</code> 中的内容用于显示公式后面的标记。公式之间通过<code>\label{}</code> 设置的内容来引用。为了引用公式，可以使用<code>\eqref{yourlabel}</code> ，如<code>$$a + y^3 \stackrel{\eqref{1}}= x^2$$</code> 显示为：<br>
<img class="math-block" alt="a + y^3 \stackrel{\eqref{1}}= x^2" src="https://math.jianshu.com/math?formula=a%20%2B%20y%5E3%20%5Cstackrel%7B%5Ceqref%7B1%7D%7D%3D%20x%5E2" mathimg="1"></p>
<p>或者使用<code>\ref{yourlabel}</code> 不带括号引用，如<code>$$a + y^3 \stackrel{\ref{111}}= x^2$$</code> 显示为:<br>
<img class="math-block" alt="a + y^3 \stackrel{\ref{1}}= x^2" src="https://math.jianshu.com/math?formula=a%20%2B%20y%5E3%20%5Cstackrel%7B%5Cref%7B1%7D%7D%3D%20x%5E2" mathimg="1"></p>
<h2><strong>字体</strong></h2>
<h3>黑板粗体字</h3>
<p>此字体经常用来表示代表实数、整数、有理数、复数的大写字母。<br>
<code>$\mathbb ABCDEF$</code>：<img class="math-inline" alt="\mathbb ABCDEF" src="https://math.jianshu.com/math?formula=%5Cmathbb%20ABCDEF" mathimg="1"><br>
<code>$\Bbb ABCDEF$</code>：<img class="math-inline" alt="\Bbb ABCDEF" src="https://math.jianshu.com/math?formula=%5CBbb%20ABCDEF" mathimg="1"></p>
<h3>黑体字</h3>
<p><code>$\mathbf ABCDEFGHIJKLMNOPQRSTUVWXYZ$</code> :<img class="math-inline" alt="\mathbf ABCDEFGHIJKLMNOPQRSTUVWXYZ" src="https://math.jianshu.com/math?formula=%5Cmathbf%20ABCDEFGHIJKLMNOPQRSTUVWXYZ" mathimg="1"><br>
<code>$\mathbf abcdefghijklmnopqrstuvwxyz$</code> :<img class="math-inline" alt="\mathbf abcdefghijklmnopqrstuvwxyz" src="https://math.jianshu.com/math?formula=%5Cmathbf%20abcdefghijklmnopqrstuvwxyz" mathimg="1"></p>
<h3>打印机字体</h3>
<p><code>$\mathtt ABCDEFGHIJKLMNOPQRSTUVWXYZ$</code> :<img class="math-inline" alt="\mathtt ABCDEFGHIJKLMNOPQRSTUVWXYZ" src="https://math.jianshu.com/math?formula=%5Cmathtt%20ABCDEFGHIJKLMNOPQRSTUVWXYZ" mathimg="1"></p>
<h2><strong>参考文档</strong></h2>
<table>
<thead>
<tr>
<th>#</th>
<th>链接地址</th>
<th>文档名称</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td><code>blog.csdn.net/dabokele/article/details/79577072</code></td>
<td><a href="https://blog.csdn.net/dabokele/article/details/79577072" target="_blank" rel="nofollow">Mathjax公式教程</a></td>
</tr>
<tr>
<td>2</td>
<td><code>blog.csdn.net/ethmery/article/details/50670297</code></td>
<td><a href="https://blog.csdn.net/ethmery/article/details/50670297" target="_blank" rel="nofollow">基本数学公式语法</a></td>
</tr>
<tr>
<td>3</td>
<td><code>blog.csdn.net/lilongsy/article/details/79378620</code></td>
<td><a href="https://blog.csdn.net/lilongsy/article/details/79378620" target="_blank" rel="nofollow">常用数学符号的LaTeX表示方法</a></td>
</tr>
<tr>
<td>4</td>
<td><code>www.mathjax.org</code></td>
<td><a href="https://www.mathjax.org/" target="_blank" rel="nofollow">Beautiful math in all browsers</a></td>
</tr>
</tbody>
</table>
</article></section></div></div></div></div></body>
</html>











]]></content>
      <categories>
        <category>instructions</category>
        <category>notes</category>
      </categories>
      <tags>
        <tag>instructions</tag>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>python多线程、多进程</title>
    <url>/2020/03/04/python-multithreading/</url>
    <content><![CDATA[<p>浅尝辄止,能用就行</p>
<hr>
<h2 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line">lock = threading.Lock() <span class="comment"># 设置一个全局线程锁,某个线程在获得此锁之后其他线程不能再获得</span></span><br><span class="line"></span><br><span class="line">sem = threading.Semaphore(<span class="number">12</span>) <span class="comment"># 设置最大线程数量</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> sem:</span><br><span class="line">    t = threading.Thread(target=function,args=(a,b,c))  <span class="comment"># 用function(a,b,c)创建一个线程</span></span><br><span class="line">    t.setDaemon(<span class="literal">True</span>)   <span class="comment">#   设置t线程为主线程的守护线程,即主线程结束后会自动杀死子线程(默认为false)</span></span><br><span class="line">    t.start()   <span class="comment"># 启动线程</span></span><br><span class="line">    t.join(<span class="number">60</span>)  <span class="comment"># 线程同步，主线程任务结束之后，进入阻塞状态，一直等待其他的子线程执行结束之后，主线程再终止;如果超时主线程也会终止(默认为无)</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">#   若在function中执行lock.acquire(),则线程阻塞直到其他线程释放此锁</span></span><br><span class="line"><span class="comment">#   function中执行完lock.acquire()后必须进行lock.release(),否则其他线程将永远无法获得此锁</span></span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h2 id="多进程"><a href="#多进程" class="headerlink" title="多进程"></a>多进程</h2><p>多进程与多线程运用方式相仿</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"></span><br><span class="line">lock = multiprocessing.Lock()   <span class="comment"># 设置一个全局进程锁,某个进程在获得此锁之后其他进程不能再获得</span></span><br><span class="line"></span><br><span class="line">p = multiprocessing.Pool(<span class="number">72</span>)    <span class="comment"># 建立一个进程池,设置最大的进程数量</span></span><br><span class="line"></span><br><span class="line">p.apply_async(func=function,args=(a,))  <span class="comment"># 用function(a)创建一个进程</span></span><br><span class="line"></span><br><span class="line">p.close()   <span class="comment">#   关闭进程池,不再接受新的进程</span></span><br><span class="line">p.join()    <span class="comment">#   主进程阻塞,等待其他进程结束</span></span><br></pre></td></tr></table></figure>

<p>注: windows中多线程的代码应当写道<code>if __name__ == &#39;main&#39;</code>中</p>
]]></content>
      <categories>
        <category>notes</category>
      </categories>
      <tags>
        <tag>learning</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>python spider</title>
    <url>/2020/03/04/python-spider/</url>
    <content><![CDATA[<p>烂尾中…</p>
<hr>
<p>资料主要来源于北理工的<a href="https://www.icourse163.org/learn/BIT-1001870001?tid=1206951268#" target="_blank" rel="noopener">爬虫课程</a><br>有requests库、beautifulsoup库、scrapy框架等</p>
<h2 id="request库"><a href="#request库" class="headerlink" title="request库"></a>request库</h2><p><code>import requests</code></p>
<h3 id="request"><a href="#request" class="headerlink" title="request."></a>request.</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">.request()</span><br><span class="line">.get() 获取网页</span><br><span class="line">.head() 获取网页头</span><br><span class="line">.post() 提交post请求</span><br><span class="line">.put() 提交put请求</span><br><span class="line">.patch() 提交局部修改请求</span><br><span class="line">.delete() 提交删除请求</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h3 id="关于url"><a href="#关于url" class="headerlink" title="关于url"></a>关于url</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">url:http:&#x2F;&#x2F;host[:port][path]</span><br><span class="line">http协议资源操作：</span><br><span class="line">GET 请求获取url位置的资源</span><br><span class="line">HEAD 获取url资源头部信息</span><br><span class="line">POST 请求向资源后附加的新数据</span><br><span class="line">PUT 请求向url位置存储资源，覆盖原有url位置资源</span><br><span class="line">PATCH 请求向资源进行局部更新</span><br><span class="line">DELETE 请求删除资源</span><br></pre></td></tr></table></figure>


<h3 id="request-get-url"><a href="#request-get-url" class="headerlink" title="request.get(url)"></a>request.get(url)</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">r=requests.get(<span class="string">'http://www.baidu.com'</span>,) <span class="comment">#Response</span></span><br><span class="line"></span><br><span class="line">r.status_code-&gt;200/404</span><br><span class="line">r.text-&gt;string text</span><br><span class="line">r.encodonig-&gt;header enconding</span><br><span class="line">r.apparent_encoding-&gt;text encoding</span><br><span class="line">r.content-&gt;binary text</span><br><span class="line">r.headers</span><br><span class="line"></span><br><span class="line">r.raise_for_status(</span><br><span class="line"></span><br><span class="line">requests.ConnectionError</span><br><span class="line">        HTTPError</span><br><span class="line">        URLRequired</span><br><span class="line">        TooManyRedirects</span><br><span class="line">        ConnectTimeout</span><br><span class="line">        TImeout</span><br></pre></td></tr></table></figure>

<h4 id="请求头部r-head"><a href="#请求头部r-head" class="headerlink" title="请求头部r.head"></a>请求头部r.head</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(r.headers)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">&#123;'Cache-Control': 'private</span></span><br><span class="line"><span class="string">, no-cache, no-store, proxy-revalidate, no-transform', </span></span><br><span class="line"><span class="string">'Connection': 'keep-alive', 'Content-Encoding': 'gzip', </span></span><br><span class="line"><span class="string">'Content-Type': 'text/html', 'Date': 'Sat, 11 Jan 2020 08:39:34 GMT', </span></span><br><span class="line"><span class="string">'Last-Modified': 'Mon, 23 Jan 2017 13:27:36 GMT', 'Pragma': 'no-cache', </span></span><br><span class="line"><span class="string">'Server': 'bfe/1.0.8.18', 'Set-Cookie': 'BDORZ=27315; max-age=86400; domain=.baidu.com; path=/', </span></span><br><span class="line"><span class="string">'Transfer-Encoding': 'chunked'&#125;</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure>

<h4 id="在url中附加数据"><a href="#在url中附加数据" class="headerlink" title="在url中附加数据"></a>在url中附加数据</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">payload = &#123;<span class="string">'key1'</span>:<span class="string">'value1'</span>, <span class="string">'key2'</span>:<span class="string">'value2'</span>&#125;</span><br><span class="line">r = requests.post(<span class="string">'http://httpbin.org/post'</span>,data=payload)</span><br><span class="line">print(r.text)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">&#123; ...</span></span><br><span class="line"><span class="string">  "form": &#123;</span></span><br><span class="line"><span class="string">    "key1": "value1", </span></span><br><span class="line"><span class="string">    "key2": "value2"</span></span><br><span class="line"><span class="string">  &#125;, </span></span><br><span class="line"><span class="string">  ...</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">r = requests.post(<span class="string">'http://httpbin.org/post'</span>,data=<span class="string">'ABC'</span>)</span><br><span class="line">print(r.text)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">&#123; ...</span></span><br><span class="line"><span class="string">  "data": "ABC", </span></span><br><span class="line"><span class="string">  "form": &#123;&#125;, </span></span><br><span class="line"><span class="string">  ...</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment"># r = requests.post('http://httpbin.org/post',data=payload)</span></span><br></pre></td></tr></table></figure>

<h2 id="beautifulsoup库"><a href="#beautifulsoup库" class="headerlink" title="beautifulsoup库"></a>beautifulsoup库</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br></pre></td></tr></table></figure>

<h3 id="整理网页格式"><a href="#整理网页格式" class="headerlink" title="整理网页格式"></a>整理网页格式</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">r = requests.get(<span class="string">"http://python123.io/ws/demo.html"</span>)</span><br><span class="line">demo = r.text   <span class="comment"># print(demo)</span></span><br><span class="line"></span><br><span class="line">soup = BeautifulSoup(demo , <span class="string">"html.parser"</span>) <span class="comment"># demo-&gt;open("path.html")</span></span><br><span class="line">print(soup.prettify)</span><br></pre></td></tr></table></figure>

<h3 id="bf类的基本元素"><a href="#bf类的基本元素" class="headerlink" title="bf类的基本元素"></a>bf类的基本元素</h3><ul>
<li>tag: &lt;&gt;…&lt;/&gt; 标签,基本信息组织单元</li>
<li>Name:<tag>.name   标签名字</tag></li>
<li>Attributs:<tag>.attrs 标签属性</tag></li>
<li>NavigableString:<tag>.string  标签内字符串</tag></li>
<li>Comment:特殊注释:&lt;!content&gt;为注释   </li>
</ul>
<p><img src="/2020/03/04/python-spider/tag0.png" alt="tag"> </p>
<h3 id="HTML结构"><a href="#HTML结构" class="headerlink" title="HTML结构"></a>HTML结构</h3><p>HTML基本结构:树形结构</p>
<p><img src="/2020/03/04/python-spider/tag1.png" alt="tag"> </p>
<p>节点查找与遍历:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">print(soup.title)</span><br><span class="line">print(soup.a) #返回第一个a标签</span><br><span class="line">print(soup.a.parent.name)</span><br><span class="line">print(soup.a.attrs)</span><br><span class="line">print(soup.a.string)</span><br><span class="line"></span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">&lt;tag&gt;.contents  儿子节点列表</span><br><span class="line">&lt;tag&gt;.children  儿子节点迭代器</span><br><span class="line">&lt;tag&gt;.descendent    子孙节点列表</span><br><span class="line"></span><br><span class="line">&lt;tag&gt;.parent 父亲节点</span><br><span class="line">&lt;tag&gt;.parents 父辈节点迭代器</span><br><span class="line"></span><br><span class="line">&lt;tag&gt;.next_sibling(s) 同一父节点下才构成兄弟关系</span><br><span class="line">&lt;tag&gt;.previous_sibling(s)</span><br><span class="line">&#39;&#39;&#39;</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(soup.find_all(<span class="string">'a'</span>))</span><br><span class="line">print(soup.find_all(re.compile(<span class="string">'b'</span>))) <span class="comment"># 返回以b开头的标签</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">&lt;&gt;.find_all(name,attrs,recursive,string,**kwargs)</span></span><br><span class="line"><span class="string">            名字  属性  是否搜索子孙 字符串检索</span></span><br><span class="line"><span class="string">tag.find_all(True)-&gt;所有标签</span></span><br><span class="line"><span class="string">tag.find_all(id='link')-&gt;attrs</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">soup()=soup.find_all</span></span><br><span class="line"><span class="string">&lt;tag&gt;()=&lt;tag&gt;.find_all()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">.fing()</span></span><br><span class="line"><span class="string">.find_parents()</span></span><br><span class="line"><span class="string">......</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure>

<h2 id="scrapy框架"><a href="#scrapy框架" class="headerlink" title="scrapy框架"></a>scrapy框架</h2><p>cmd命令</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">pip install scapy</span><br><span class="line">scapy startproject &lt;name&gt; [<span class="built_in">dir</span>] //创建工程</span><br><span class="line">scrapy genspider [options] &lt;name&gt; &lt;domain&gt;  //创建爬虫</span><br><span class="line">scrapy crawl &lt;spider&gt;</span><br></pre></td></tr></table></figure>

<p>太乱了,写不下去了…</p>
<p>关于scrapy,可以参考<a href="https://www.jianshu.com/p/cecb29c04cd2" target="_blank" rel="noopener">https://www.jianshu.com/p/cecb29c04cd2</a></p>
<hr>
<p>等我哪天有兴趣了再回来整理整理这篇博文</p>
]]></content>
      <categories>
        <category>notes</category>
      </categories>
      <tags>
        <tag>learning</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>毛概相关</title>
    <url>/2020/03/03/mao-theory/</url>
    <content><![CDATA[<p>水课，佛系更新</p>
<hr>
<h2 id="第一章问题"><a href="#第一章问题" class="headerlink" title="第一章问题"></a>第一章问题</h2><ul>
<li>如何理解毛泽东思想活的灵魂</li>
</ul>
<ol>
<li>思想路线: 坚持实事求是，一切从实际出发，理论联系实际，坚持在实践中检验和发展真理</li>
<li>根本工作路线: 群众路线;一切为了群众,一切依靠群众,从群众中来,到群众中去,把党的主张变为群众的自觉行动</li>
<li>根本政治原则: 独立自主;坚持独立思考,走自己的路;坚定不移地维护民族独立,捍卫国家主权,把立足点放在依靠自己力量的基础之上;同时积极争取外援,开展国际经济文化交流,学习外国一切对我们有益的先进事物</li>
</ol>
<a id="more"></a>]]></content>
      <categories>
        <category>notes</category>
        <category>学位课程</category>
      </categories>
      <tags>
        <tag>learning</tag>
        <tag>毛概</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库原理与设计</title>
    <url>/2020/02/27/data-base0/</url>
    <content><![CDATA[<p>未完结,持续更新</p>
<hr>
<p>任课教师: 赵朋朋<a href="http://web.suda.edu.cn/ppzhao/" target="_blank" rel="noopener">http://web.suda.edu.cn/ppzhao/</a></p>
<p>课程主要讲述关系型数据库的原理, 不着重于具体数据库的使用</p>
<a id="more"></a>

<h2 id="绪论"><a href="#绪论" class="headerlink" title="绪论"></a>绪论</h2><h3 id="数据库系统概述"><a href="#数据库系统概述" class="headerlink" title="数据库系统概述"></a>数据库系统概述</h3><h4 id="数据库中的基本概念"><a href="#数据库中的基本概念" class="headerlink" title="数据库中的基本概念"></a>数据库中的基本概念</h4><ul>
<li>数据(data): 是数据库中存储的基本对象; 是描述事物的符号记录,包括数字、文字等不同种类 </li>
</ul>
<blockquote>
<p>数据的含义称为数据的语义，数据和语义是密不可分的<br>数据的形式是不能完全表达其语言上的内容，需要对数据进行语义上的解释  </p>
</blockquote>
<ul>
<li>数据库(database): 是长期存储在计算机内,有组织,可共享的大量数据的集合</li>
</ul>
<blockquote>
<p>数据库的基本特征:  </p>
<ol>
<li>数据按一定的数据模型组织,描述和存储</li>
<li>可为各种用户共享,冗余度较小,易扩展</li>
<li>数据独立性较高</li>
</ol>
</blockquote>
<ul>
<li>数据库管理系统(DBMS): 是位于用户应用与操作系统之间的一层数据管理软件,是一个大型复杂的软件系统</li>
</ul>
<blockquote>
<p>用途: 能科学地组织和存储数据,高效的获取和维护数据<br>功能: 数据定义功能(提供数据定义语言), 数据组织存储管理功能,数据操纵功能(提供数据操纵语言,增删改查), 数据库的<strong>事务和并发</strong>管理和运行管理功能(保证数据安全完整,故障恢复), 数据库建立和维护功能(提供实用程序和工具), 其它功能(通信,数据转换等)</p>
</blockquote>
<ul>
<li>数据库系统(DBS): 在计算机系统中引入数据库后的系统构成, 也可简称为数据库</li>
</ul>
<blockquote>
<p>数据库系统构成: 数据库, 数据库管理系统(及其应用开发工具), 应用程序, 数据库管理员(DBA)</p>
</blockquote>
<h4 id="数据库管理技术"><a href="#数据库管理技术" class="headerlink" title="数据库管理技术"></a>数据库管理技术</h4><p>数据管理: 对数据进行分类,组织,编码,存储,检索和维护<br>数据管理是数据处理和数据分析的中心问题</p>
<p>发展: 人工管理-&gt;文件系统管理-&gt;数据库系统管理<br><img src="/2020/02/27/data-base0/diff0.png" alt="diff"></p>
<ul>
<li>人工管理阶段, 应用程序和数据集是一一对应的</li>
<li>文件系统阶段, 存取方法是共享的, 但应用程序和数据集是一一对应的</li>
<li>数据库系统阶段, 多个应用程序通过同一个数据库管理系统对同一个数据库进行操作</li>
</ul>
<h4 id="数据库系统的特点"><a href="#数据库系统的特点" class="headerlink" title="数据库系统的特点"></a>数据库系统的特点</h4><ul>
<li>数据结构化</li>
<li>数据的共享性高,冗余度低且易扩充</li>
<li>数据独立性高</li>
<li>数据由数据库管理系统统一管理和控制</li>
</ul>
<h3 id="数据模型"><a href="#数据模型" class="headerlink" title="数据模型"></a>数据模型</h3><p>数据模型是对现实世界数据特征的抽象</p>
<p>数据模型应满足三方面要求</p>
<ul>
<li>能比较真实地模拟现实世界</li>
<li>容易为人所理解</li>
<li>便于在计算机上实现  </li>
</ul>
<p>数据模型是数据库系统的核心和基础 </p>
<h4 id="两类数据模型"><a href="#两类数据模型" class="headerlink" title="两类数据模型"></a>两类数据模型</h4><p>数据模型分为两类(两个不同层次):  </p>
<ul>
<li>概念模型，也称信息模型 : 它是按用户的观点来对数据和信息建模，用于数据库设计  </li>
<li>逻辑模型和物理模型 <blockquote>
<ul>
<li>逻辑模型主要包括网状模型、层次模型、关系模型、面向对象数据模型、对 象关系数据模型、半结构化数据模型等</li>
<li>逻辑模型是按计算机系统的观点对数据建模，用于DBMS实现</li>
<li>物理模型是对数据最底层的抽象, 是描述数据在系统内（磁盘上）的表示方式和存取方法</li>
</ul>
</blockquote>
</li>
</ul>
<p>现实世界中客观对象的抽象过程:<br>1<a href="proc0.png">proc</a></p>
<h4 id="概念模型"><a href="#概念模型" class="headerlink" title="概念模型"></a>概念模型</h4><ul>
<li>概念模型用于信息世界的建模 </li>
<li>是现实世界到机器世界的一个中间层次</li>
<li>是数据库设计的有力工具</li>
<li>数据库设计人员和用户之间进行交流的语言 </li>
</ul>
<p>概念模型的特点:  </p>
<ul>
<li>较强的语义表达能力</li>
<li>简单、清晰、易于用户理解 </li>
</ul>
<p>信息世界中的基本概念: </p>
<ul>
<li>实体（Entity）: 客观存在并可相互区别的事物称为实体。可以是具体的人、事、物或抽象的概念。</li>
<li>属性（Attribute）: 实体所具有的某一特性称为属性。一个实体可以由若干个属性来刻画。</li>
<li>码（Key）: 唯一标识实体的属性集称为码。</li>
<li>实体型（Entity Type）: 用实体名及其属性名集合来抽象和刻画同类实体称为实体型</li>
<li>实体集（Entity Set）: 同一类型实体的集合称为实体集 </li>
<li>联系（Relationship）: 现实世界中事物内部以及事物之间的联系在信息世界中反映为实体（型）内部的联系和实体（型）之间的联系。<blockquote>
<ul>
<li>实体内部的联系: 是指组成实体的各属性之间的联系 </li>
<li>实体之间的联系: 通常是指不同实体集之间的联系, 实体之间的联系有一对一（1:1）、一对多（1:n）和多对多（m:n）等多种类型 </li>
</ul>
</blockquote>
</li>
</ul>
<p>实体-联系方法（Entity-Relationship Approach）是概念模型的一种表示方法:</p>
<ul>
<li>用E-R图来描述现实世界的概念模型 </li>
<li>E-R方法也称为E-R模型<br><img src="/2020/02/27/data-base0/rela0.png" alt="relation">  </li>
</ul>
<p>(具体方法在数据库设计中会讲到)</p>
<h3 id="数据模型的组成要素"><a href="#数据模型的组成要素" class="headerlink" title="数据模型的组成要素"></a>数据模型的组成要素</h3><p>数据模型是严格定义的一组概念的集合</p>
<ul>
<li>它精确地描述了系统的静态特性、动态特性和完整性约束条件 (Integrity Constraints)。</li>
</ul>
<p>数据模型由三部分组成</p>
<ul>
<li>数据结构–描述系统的静态特性 </li>
<li>数据操作–描述系统的动态特性 </li>
<li>完整性约束条件</li>
</ul>
<h4 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h4><ul>
<li><p>数据结构是刻画数据模型性质的重要方面  </p>
<blockquote>
<ul>
<li>一般用数据结构的类型来命名数据模型,如: 层次结构-层次模型、网状结构–网状模型、关系结构—关系模型 </li>
</ul>
</blockquote>
</li>
<li><p>数据结构是用来描述数据库的组成对象–对象的类型、内容、性质</p>
</li>
<li><p>数据结构可以用来描述对象之间的联系 </p>
</li>
</ul>
<h4 id="数据操作"><a href="#数据操作" class="headerlink" title="数据操作"></a>数据操作</h4><p>数据操作是对数据库中各种对象的实例允许执行的操作的集合，包括操作的类型及有关的操作规则</p>
<p>操作的类型: 增删改查</p>
<p>数据操作语言: </p>
<ul>
<li>数据操作语言需要定义数据操作的确切含义、符号、优先级别</li>
<li>数据操作语言需要实现查询语言(Query Language)和更新语言(Insert、Delete、Update) </li>
</ul>
<h4 id="数据完整性约束条件"><a href="#数据完整性约束条件" class="headerlink" title="数据完整性约束条件"></a>数据完整性约束条件</h4><p>数据完整性约束条件是一组完整性规则的集合</p>
<ul>
<li>完整性规则：给定的数据模型中数据及其联系所具有的制约和依存规则</li>
<li>完整性规则可以限定符合数据模型的数据库状态以及状态的变化，以保证数 据的正确、有效和相容。</li>
</ul>
<p>数据模型对完整性约束条件的定义:</p>
<ul>
<li>反映和规定必须遵守的基本的通用的完整性约束条件</li>
<li>提供定义完整性约束条件的机制，以反映具体应用所涉及的数据必须遵守的特定的语义约束条件。</li>
</ul>
<h4 id="常用的数据模型"><a href="#常用的数据模型" class="headerlink" title="常用的数据模型"></a>常用的数据模型</h4><ul>
<li>格式化模型: 层次模型,网状模型 </li>
<li>关系模型</li>
<li>对象模型: 面向对象数据模型,对象关系数据模型</li>
<li>半结构化数据模型:XML,HTML</li>
<li>非结构化数据模型,图模型,…</li>
</ul>
<h4 id="层次模型"><a href="#层次模型" class="headerlink" title="层次模型"></a>层次模型</h4><p>层次模型用树形结构来表示各类实体以及实体间的联系</p>
<p>表示方法：</p>
<ul>
<li>实体型：用纪录类描述，每个节点表示一个记录类型</li>
<li>属性：用字段描述，每个记录类型可包含若干个字段</li>
<li>联系：用结点之间的连线表示记录类型（实体）之间的一对多的父子联系</li>
</ul>
<p>特点:</p>
<ul>
<li>结点的双亲是唯一的</li>
<li>只能直接处理一对多的实体联系</li>
<li>任何记录值只有按其路径查看</li>
<li>没有一个子女记录值能够脱离双亲记录值而独立存在 </li>
</ul>
<p>优缺点:</p>
<ul>
<li>(优点)层次模型的数据结构比较简单清晰</li>
<li>查询效率高，性能优于关系模型，不低于网状模型</li>
<li>层次数据模型提供了良好的完整性支持</li>
<li>(缺点)结点之间的多对多联系表示不自然</li>
<li>对插入和删除操作的限制多，应用程序的编写比较复杂</li>
<li>查询子女结点必须通过双亲结点</li>
<li>层次数据库的命令（语言）趋于程序化  </li>
</ul>
<h4 id="网状模型"><a href="#网状模型" class="headerlink" title="网状模型"></a>网状模型</h4><p>网状数据库系统采用网状结构来表示各类实体以及实体间的联系(有向图)</p>
<p>网状模型表示方法和层次模型相同</p>
<p>特点:</p>
<ul>
<li>允许多个结点没有双亲结点</li>
<li>允许一个结点有多个双亲结点</li>
<li>允许两个结点之间有多种联系</li>
<li>要为每个联系命名并指出与该联系有关的双亲记录和子女记录 </li>
</ul>
<p>优缺点:</p>
<ul>
<li>(优点)能够更为直接地描述现实世界，如一个结点可以有多个双亲</li>
<li>具有良好的性能，存取效率较高</li>
<li>(缺点)结构比较复杂，而且随着应用环境的扩大，数据库的结构就变得越来越复杂，不利于最终用户掌握</li>
<li>DDL、DML语言复杂，用户不容易使用</li>
<li>记录之间联系是通过存取路径实现的，应用程序必须选择存取路径，加重了程序员的负担</li>
</ul>
<h4 id="关系模型"><a href="#关系模型" class="headerlink" title="关系模型"></a>关系模型</h4><p>在用户观点下，关系模型中数据的逻辑结构是一张二维表,如下<br><img src="/2020/02/27/data-base0/rela0.png" alt="relation">  </p>
<p>其中:</p>
<ul>
<li>关系: 一个关系对应通常来说的一张表</li>
<li>元组: 表中的一行即为一个元组</li>
<li>属性: 表中的一列即为一个属性, 每一个属性都会有一个属性名</li>
<li>主码(key): 也称码键, 是可以唯一确定一个元组的属性组</li>
<li>域(domain): 是一组具有相同数据类型的值的集合, 是属性的取值范围</li>
<li>分量: 元组中的一个属性值</li>
<li>关系模式: 对关系的描述</li>
</ul>
<p>注意: 关系模型中的关系必须是规范化的, 关系中的每一个分量必须是不可分的数据项, 即不允许表中套表(这个表应该是个纯粹的二维数组)</p>
<p>优点:</p>
<ul>
<li>建立在严格的数学概念的基础上</li>
<li>概念单一<blockquote>
<ul>
<li>实体和各类联系都用关系来表示 </li>
<li>对数据的检索结果也是关系 </li>
</ul>
</blockquote>
</li>
<li>关系模型的存取路径对用户透明(用户感受不到路径)<blockquote>
<ul>
<li>具有更高的数据独立性，更好的安全保密性 </li>
<li>简化了程序员的工作和数据库开发建立的工作 </li>
</ul>
</blockquote>
</li>
</ul>
<p>缺点:</p>
<ul>
<li>存取路径对用户透明，查询效率往往不如格式化数据模型</li>
<li>为提高性能，必须对用户的查询请求进行优化，增加了开发数据库管理系统的难度</li>
</ul>
<h2 id="数据库系统的结构"><a href="#数据库系统的结构" class="headerlink" title="数据库系统的结构"></a>数据库系统的结构</h2><h2 id="数据库系统的组成"><a href="#数据库系统的组成" class="headerlink" title="数据库系统的组成"></a>数据库系统的组成</h2><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><hr>
<p><em>待更新…</em></p>
]]></content>
      <categories>
        <category>notes</category>
        <category>学位课程</category>
      </categories>
      <tags>
        <tag>learning</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>featured-chinese-culture</title>
    <url>/2020/02/26/featured-chinese-culture/</url>
    <content><![CDATA[<p>英语课，佛系更新</p>
<hr>
]]></content>
      <categories>
        <category>notes</category>
      </categories>
      <tags>
        <tag>learning</tag>
      </tags>
  </entry>
  <entry>
    <title>中国园林文化与艺术</title>
    <url>/2020/02/25/chinese-garden/</url>
    <content><![CDATA[<p>选修课，佛系更新</p>
<hr>
]]></content>
      <categories>
        <category>notes</category>
      </categories>
      <tags>
        <tag>learning</tag>
      </tags>
  </entry>
  <entry>
    <title>Lucence相关</title>
    <url>/2020/02/24/Lucence0/</url>
    <content><![CDATA[<p><del>未完结,不定期更新</del>  完结</p>
<hr>
<p>Lucence是一个由Java实现的,支持纯文本文件索引和搜索的高效、可扩展、开源的的全文检索框架</p>
<p>因自己需要用到lucence.net相关知识, 学习时参阅了不少资料, 将一些要点记录在此, 以供参考</p>
<a id="more"></a>

<h2 id="总论"><a href="#总论" class="headerlink" title="总论"></a>总论</h2><p>参考:<br><a href="https://www.cnblogs.com/forfuture1978/archive/2010/06/13/1757479.html" target="_blank" rel="noopener">https://www.cnblogs.com/forfuture1978/archive/2010/06/13/1757479.html</a><br><a href="https://blog.csdn.net/PZ_eng/article/details/91977083" target="_blank" rel="noopener">https://blog.csdn.net/PZ_eng/article/details/91977083</a>  </p>
<p><a href="http://lucene.apache.org/" target="_blank" rel="noopener">http://lucene.apache.org/</a>  </p>
<h3 id="全文检索"><a href="#全文检索" class="headerlink" title="全文检索"></a>全文检索</h3><h4 id="数据的分类"><a href="#数据的分类" class="headerlink" title="数据的分类"></a>数据的分类</h4><p>生活中数据总体分为如下几种:</p>
<ul>
<li>结构化数据: 具有固定格式或有限长度的数据(数据库,元数据)</li>
<li>非结构化数据: 不定长或无固定格式数据(word文档)</li>
<li>半结构化数据: 可根据需要当成结构化数据处理,也可以抽取纯文本按非结构化数据处理  </li>
</ul>
<p>其中,非结构化数据又叫全文数据</p>
<h4 id="全文数据搜索的主要方法"><a href="#全文数据搜索的主要方法" class="headerlink" title="全文数据搜索的主要方法"></a>全文数据搜索的主要方法</h4><ul>
<li>顺序扫描法: 直接,方便,较慢</li>
<li>索引法: 将非结构化数据中一部分信息提取出来重新组织,使其有一定结构后再搜索  </li>
</ul>
<p>索引构成了全文检索的基本思路<br>这种先建立索引,再对索引进行搜索的过程就叫做全文检索</p>
<p>全文检索大体分为两个过程: 索引创建,搜索索引</p>
<h4 id="全文检索需要关注的问题"><a href="#全文检索需要关注的问题" class="headerlink" title="全文检索需要关注的问题"></a>全文检索需要关注的问题</h4><p>因此,全文检索需要关注下面三个问题:  </p>
<ol>
<li>索引里面应该存什么(index)</li>
<li>如何创建索引(indexing)</li>
<li>如何对索引进行搜索(search)</li>
</ol>
<h3 id="索引里面应该存什么–倒排索引"><a href="#索引里面应该存什么–倒排索引" class="headerlink" title="索引里面应该存什么–倒排索引"></a>索引里面应该存什么–倒排索引</h3><p>倒排索引一般形式如下:</p>
<blockquote>
<p>token1-&gt;doc1 doc2 doc3 …<br>token2-&gt;doc3 doc5 doc6 …</p>
</blockquote>
<p>其中:</p>
<ul>
<li>token所在的地方称为词典</li>
<li>每个token指向一个文档链表,此链表称为倒排表</li>
</ul>
<p>通过这种索引方式,加上对链表的一系列操作,可以大大加速全文搜索的速度</p>
<h3 id="索引创建一般过程"><a href="#索引创建一般过程" class="headerlink" title="索引创建一般过程"></a>索引创建一般过程</h3><p>创建索引一般分为如下几步:</p>
<ol>
<li>整理要索引的Document</li>
<li>将Document传给Tokenizer,得到Token(分词)</li>
<li>将Token传给Linguistic Processor进行预处理,得到Term(转变大小写,词性,单复数)</li>
<li>将Term传给Indexer进行倒排索引</li>
</ol>
<h3 id="搜索一般过程"><a href="#搜索一般过程" class="headerlink" title="搜索一般过程"></a>搜索一般过程</h3><p>对索引进行搜索一般分为如下几步:</p>
<ol>
<li>用户输入query</li>
<li>对query进行词法,语法分析以及语言处理,得到语法树</li>
<li>搜索索引,得到符合语法树的文档</li>
<li>根据得到的文档和query的相关性对结果进行排序</li>
</ol>
<h3 id="Lucence"><a href="#Lucence" class="headerlink" title="Lucence"></a>Lucence</h3><p>Lucence是一个由Java实现的,支持纯文本文件的索引和搜索的高效、可扩展的全文检索框架</p>
<h4 id="Lucence和外界的交互"><a href="#Lucence和外界的交互" class="headerlink" title="Lucence和外界的交互"></a>Lucence和外界的交互</h4><p><img src="/2020/02/24/Lucence0/Lucence0.png" alt="Lucence"></p>
<h4 id="Lucence内部结构"><a href="#Lucence内部结构" class="headerlink" title="Lucence内部结构"></a>Lucence内部结构</h4><p><img src="/2020/02/24/Lucence0/Lucence1.png" alt="Lucence"></p>
<p>其中:</p>
<ul>
<li>被索引的文档用Document对象表示  </li>
<li>IndexWriter通过函数addDocument将文档添加到索引中 ,实现创建索引的过程  </li>
<li>Lucene的索引是应用倒排索引  </li>
<li>当用户有请求时,Query代表用户的查询语句  </li>
<li>IndexSearcher通过函数search搜索Lucene Index  </li>
<li>IndexSearcher计算term weight和score并且将结果返回给用户</li>
<li>返回给用户的文档集合用TopDocsCollector表示  </li>
</ul>
<h4 id="Lucence索引过程"><a href="#Lucence索引过程" class="headerlink" title="Lucence索引过程"></a>Lucence索引过程</h4><ol>
<li>创建一个IndexWriter用来写索引文件,它有几个参数,INDEX_DIR 就是索引文件所存放的位置,Analyzer便是用来对文档进行词法分析和语言处理的 </li>
<li>创建一个 Document 代表我们要索引的文档 </li>
<li>将不同的Field加入到文档中;我们知道,一篇文档有多种信息,如题目,作者,修改时间,内容等;不同类型的信息用不同的Field来表示  </li>
<li>IndexWriter调用函数addDocument将索引写到索引文件夹中 　</li>
</ol>
<h4 id="Lucence搜索过程"><a href="#Lucence搜索过程" class="headerlink" title="Lucence搜索过程"></a>Lucence搜索过程</h4><ol>
<li>IndexReader将磁盘上的索引信息读入到内存</li>
<li>创建IndexSearcher准备进行搜索  </li>
<li>创建Analyer用来对查询语句进行词法分析和语言处理 </li>
<li>创建QueryParser用来对查询语句进行语法分析 </li>
<li>QueryParser调用parser进行语法分析,形成查询语法树,放到Query中  </li>
<li>IndexSearcher调用search对查询语法树Query进行搜索,得到结果TopScoreDocCollector</li>
</ol>
<h4 id="Lucence的包结构"><a href="#Lucence的包结构" class="headerlink" title="Lucence的包结构"></a>Lucence的包结构</h4><p><img src="/2020/02/24/Lucence0/Lucence2.png" alt="Lucence"></p>
<p>其中:</p>
<ul>
<li>Lucene的analysis模块主要负责词法分析及语言处理而形成Term  </li>
<li>Lucene的index模块主要负责索引的创建,里面有里面有IndexWriter</li>
<li>Lucene的store模块主要负责索引的读写</li>
<li>Lucene的QueryParser主要负责语法分析</li>
<li>Lucene的search模块主要负责对索引的搜索</li>
<li>Lucene的similarity模块主要负责对相关性打分的实现  </li>
</ul>
<h2 id="Lucence-net"><a href="#Lucence-net" class="headerlink" title="Lucence.net"></a>Lucence.net</h2><p>参考:<br><a href="http://lucenenet.apache.org/" target="_blank" rel="noopener">http://lucenenet.apache.org/</a><br><a href="https://www.cnblogs.com/xiaoyaodijun/p/4140507.html" target="_blank" rel="noopener">https://www.cnblogs.com/xiaoyaodijun/p/4140507.html</a><br><a href="https://blog.csdn.net/xuezhongsong/article/details/4388241" target="_blank" rel="noopener">https://blog.csdn.net/xuezhongsong/article/details/4388241</a></p>
<h3 id="lucence-net中主要的几个类"><a href="#lucence-net中主要的几个类" class="headerlink" title="lucence.net中主要的几个类"></a>lucence.net中主要的几个类</h3><h4 id="Document"><a href="#Document" class="headerlink" title="Document"></a>Document</h4><p>Document用于描述一个文档,由多个Field(相当于属性)组成</p>
<p>常用方法: </p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title">Document</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Document</span>(<span class="params"></span>)</span>;</span><br><span class="line">    <span class="function">puclib <span class="keyword">void</span> <span class="title">Add</span>(<span class="params">IFieldable field</span>)</span>;  <span class="comment">//  添加字段/属性field</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Field <span class="title">GetField</span>(<span class="params"><span class="keyword">string</span> name</span>)</span>; <span class="comment">//  获得第一个名为name的field,无则返回null</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">string</span> <span class="title">Get</span>(<span class="params"><span class="keyword">string</span> name</span>)</span>; <span class="comment">// 获得第一个名为name的field 中的文本内容</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Field[] <span class="title">GetFields</span>(<span class="params"><span class="keyword">string</span> name</span>)</span>;  <span class="comment">//获得所有名为name的field,无则返回null</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">string</span>[] <span class="title">GetValues</span>(<span class="params"><span class="keyword">string</span> name</span>)</span>; <span class="comment">//  获得所有名为name的field 中的文本内容</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Field"><a href="#Field" class="headerlink" title="Field"></a>Field</h4><p>Field用于描述一个文档的某个属性,一般由名字和属性值构成</p>
<p>常用方法:</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title">Field</span> : <span class="title">AbstractField</span>, <span class="title">IFieldable</span>&#123;</span><br><span class="line">    <span class="comment">//  inherited</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">string</span> Name &#123; <span class="keyword">get</span>; &#125; <span class="comment">//  名字</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">string</span> StringValue &#123; <span class="keyword">get</span>; &#125; <span class="comment">//  属性值</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Field</span>(<span class="params"><span class="keyword">string</span> name, <span class="keyword">string</span> <span class="keyword">value</span>, Store store, Index index</span>)</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SetValue</span>(<span class="params"><span class="keyword">string</span> <span class="keyword">value</span></span>)</span>; <span class="comment">//更改属性值   </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>关于构造函数中的参数的说明:</p>
<ul>
<li><p>name: 字段名称</p>
</li>
<li><p>value: 字段内容,也就是属性值</p>
</li>
<li><p>store: 存储类型</p>
<blockquote>
<p>Field.Store有三个属性：  </p>
<ul>
<li>Field.Store.YES: 索引文件本来只存储索引数据,此设计将原文内容直接也存储在索引文件中,如文档的标题</li>
<li>Field.Store.NO：原文不存储在索引文件中，搜索结果命中后，再根据其他附加属性如文件的Path，数据库的主键等，重新连接打开原文，适合原文内容较大的情况。</li>
<li>Field.Store.COMPRESS 压缩存储  </li>
</ul>
</blockquote>
</li>
<li><p>index: 索引类型</p>
<blockquote>
<p>Field.Index有四个属性：</p>
<ul>
<li>Field.Index.TOKENIZED：分词索引</li>
<li>Field.Index.UN_TOKENIZED：进行索引，但不对其进行分词，如作者名，日期等，Rod Johnson本身为一单词，不再需要分词。</li>
<li>Field.Index.NO 和 Field.Index.NO_NORMS: 不进行索引，存放不能被搜索的内容如文档的一些附加属性如文档类型, URL等  </li>
</ul>
</blockquote>
</li>
</ul>
<h4 id="Analyzer"><a href="#Analyzer" class="headerlink" title="Analyzer"></a>Analyzer</h4><p>在一个文档被索引之前，首先需要对文档内容进行分词处理，这部分工作就是由 Analyzer 来做的。Analyzer 类是一个抽象类，它有多个实现。针对不同的语言和应用需要选择适合的 Analyzer。Analyzer 把分词后的内容交给 IndexWriter 来建立索引。</p>
<p>一般用法(不太会用,先这么写着吧):</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">StandardAnalyzer analyzer = <span class="keyword">new</span> StandardAnalyzer(Version.LUCENE_CURRENT);</span><br></pre></td></tr></table></figure>

<h4 id="IndexWriter"><a href="#IndexWriter" class="headerlink" title="IndexWriter"></a>IndexWriter</h4><p>IndexWriter 是 Lucene 用来创建索引的一个核心的类，他的作用是把一个个的 Document 对象加到索引中来。建立索引必须从它开始。而且，从它的构造函数开始</p>
<p>一般用法:</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"> IndexWriter writer = <span class="keyword">new</span> IndexWriter(<span class="keyword">string</span> idxDir,Analyzer analyzer,<span class="keyword">bool</span> isNewCreate,MaxFieldLength IndexWriter.MaxFieldLength.LIMITED);</span><br><span class="line"> </span><br><span class="line"> writer.AddDocument(doc);<span class="comment">//向索引文件中写数据 </span></span><br><span class="line">writer.Optimize();<span class="comment">// 索引优化，一般执行此步骤时，所消耗的内存是写入索引所需内存的2倍，在执行索引生成操作的时候本身就对内存有比较大的消耗，最好在索引创建完成之后，执行此步骤。 </span></span><br><span class="line">writer.Commit();<span class="comment">//数据提交 </span></span><br><span class="line">writer.Rollback();<span class="comment">//数据回滚 </span></span><br><span class="line">writer.Close();<span class="comment">//关闭流索引写入器，此步骤才真正将数据写入到索引文件中。</span></span><br></pre></td></tr></table></figure>

<h4 id="Directory"><a href="#Directory" class="headerlink" title="Directory"></a>Directory</h4><p>这个类代表了 Lucene 的索引的存储的位置，这是一个抽象类，它目前有两个实现，第一个是 FSDirectory，它表示一个存储在文件系统中的索引的位置。第二个是 RAMDirectory，它表示一个存储在内存当中的索引的位置</p>
<p>一般用法:</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">string</span> indexDir = <span class="string">"idx"</span>;</span><br><span class="line">DirectoryInfo dir = <span class="keyword">new</span> DirectoryInfo(indexDir);</span><br><span class="line"></span><br><span class="line">Lucene.Net.Store.Directory idxDir = <span class="keyword">new</span> SimpleFSDirectory(dir, <span class="keyword">new</span> SimpleFSLockFactory());  <span class="comment">//  创建上面的indexwriter需要用到</span></span><br></pre></td></tr></table></figure>

<h3 id="Lucence-net中的索引建立"><a href="#Lucence-net中的索引建立" class="headerlink" title="Lucence.net中的索引建立"></a>Lucence.net中的索引建立</h3><p>总结一下建立索引的一般过程</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*  前期准备    */</span></span><br><span class="line"><span class="keyword">var</span> indexDir = <span class="string">"idx"</span>;   <span class="comment">//  索引目录</span></span><br><span class="line"><span class="keyword">var</span> isNewCreate = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">DirectoryInfo dir = <span class="keyword">new</span> DirectoryInfo(indexDir);</span><br><span class="line">Lucene.Net.Store.Directory idxDir = <span class="keyword">new</span> SimpleFSDirectory(dir, <span class="keyword">new</span> SimpleFSLockFactory());</span><br><span class="line"></span><br><span class="line">StandardAnalyzer analyzer = <span class="keyword">new</span> StandardAnalyzer(Version.LUCENE_CURRENT);</span><br><span class="line"></span><br><span class="line">IndexWriter writer = <span class="keyword">new</span> IndexWriter(idxDir, analyzer, isNewCreate, IndexWriter.MaxFieldLength.LIMITED);</span><br><span class="line"><span class="comment">// writer.MergeFactor(50); 多少个合并一次【优化缓存】 </span></span><br><span class="line"><span class="comment">// writer.MaxMergeDocs(5000); 一个segment最多有多少个document【优化索引存储的segment文件】 </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*  写索引   */</span></span><br><span class="line">Document doc = <span class="keyword">new</span> Document();</span><br><span class="line">Field field = <span class="keyword">new</span> Field(<span class="string">"name"</span>, <span class="string">"content"</span>, Field.Store.YES, Field.Index.ANALYZED);</span><br><span class="line">doc.Add(field);</span><br><span class="line">writer.AddDocument(doc);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*  关文件   */</span></span><br><span class="line">writer.Optimize();</span><br><span class="line">writer.Commit(); </span><br><span class="line">writer.Rollback(); </span><br><span class="line">writer.Close();</span><br></pre></td></tr></table></figure>

<h3 id="Lucence-net中的索引搜索"><a href="#Lucence-net中的索引搜索" class="headerlink" title="Lucence.net中的索引搜索"></a>Lucence.net中的索引搜索</h3><p>下面是我自己写的一个索引搜索的流程模板</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> indexDir = <span class="string">"idx"</span>;   <span class="comment">//  指定索引的目录</span></span><br><span class="line">IndexSearcher searcher = <span class="keyword">new</span> IndexSearcher(LuceneConnection.GetIndexDirectory(indexDir));<span class="comment">// 建立搜索引擎; readOnly 为boolean值</span></span><br><span class="line"></span><br><span class="line">StandardAnalyzer analyzer = <span class="keyword">new</span> StandardAnalyzer(Version.LUCENE_CURRENT);   <span class="comment">//  分词器用于分析query,此分词器应当与建立索引的分词器保持一致</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// MultiFieldQueryParser parser = new MultiFieldQueryParser(Version.LUCENE_CURRENT, new string[] &#123; title, content &#125;, analyzer); 多字段搜索   </span></span><br><span class="line"><span class="keyword">var</span> q = <span class="keyword">new</span> QueryParser(Version.LUCENE_CURRENT, <span class="string">"name"</span>, <span class="keyword">new</span> StandardAnalyzer(Version.LUCENE_CURRENT)).Parse(<span class="string">"content"</span>);   <span class="comment">//  单字段搜索,字段是name搜索词是content   </span></span><br><span class="line"></span><br><span class="line">SortField sfield = <span class="keyword">new</span> SortField(<span class="literal">null</span>, SortField.SCORE, <span class="literal">true</span>);</span><br><span class="line">Sort sort = <span class="keyword">new</span> Sort(sfield);    <span class="comment">//  指定一个排序方式</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> hits = searcher.Search(q, <span class="literal">null</span>, searcher.MaxDoc, sort); <span class="comment">//  搜索,返回前searcher.MaxDoc个Docs组成的TopFieldDocs</span></span><br><span class="line"><span class="comment">//TopFieldDocs docs = searcher.Search(q,null, searcher.MaxDoc, sort);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*  下面是通过搜索结果获取Doc的一般方法  */</span></span><br><span class="line">ScoreDoc[] scoreDocs = hits.ScoreDocs;<span class="comment">//权值对象 包含document下标信息，能确定searcher中的document的下标。 </span></span><br><span class="line"><span class="keyword">int</span> docCount = scoreDocs.Length;<span class="comment">// 结果个数统计  </span></span><br><span class="line">Document doc = searcher.Doc(scoreDocs[docCount - <span class="number">1</span>].Doc); <span class="comment">// 通过document下标值，获取document对象 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//  输出结果</span></span><br><span class="line">Console.WriteLine(<span class="string">"字段&#123;2&#125;搜索到:&#123;0&#125; 字段&#123;3&#125;搜索到:&#123;1&#125;"</span>, doc.Get(<span class="string">"name"</span>), doc.Get(<span class="string">"content"</span>), <span class="string">"name"</span>, <span class="string">"hello"</span>);</span><br><span class="line">searcher.Close();</span><br></pre></td></tr></table></figure>

<hr>
<p>说实话,本人没有对搜索引擎有过系统的学习,文中有些地方也是根据自己的理解来写的; 如果各位发现有写得不妥之处，欢迎指正！</p>
]]></content>
      <categories>
        <category>notes</category>
      </categories>
      <tags>
        <tag>learning</tag>
        <tag>搜索引擎</tag>
        <tag>c#</tag>
      </tags>
  </entry>
  <entry>
    <title>编译原理相关知识</title>
    <url>/2020/02/24/compilers0/</url>
    <content><![CDATA[<p>未完结,持续更新</p>
<hr>
<p>课程内容:</p>
<ul>
<li>编译器构造的一般原理和基本实现方法</li>
<li>理论知识: 形式语言和自动机理论,语法制导的定义和属性方法,程序分析原理</li>
<li>强调形式描述技术和自动生成技术</li>
<li>强调对编译原理和技术的宏观理解,不把注意力分散到枝节算法,不偏向于任何源语言或目标机器</li>
</ul>
<a id="more"></a>

<h2 id="绪论"><a href="#绪论" class="headerlink" title="绪论"></a>绪论</h2><h3 id="编译原理概述"><a href="#编译原理概述" class="headerlink" title="编译原理概述"></a>编译原理概述</h3><p>语言处理器: 由编译器,解释器,汇编器,连接器,加载器,调试器及程序概要提取工具等所构成的集成软件开发环境  </p>
<ul>
<li>机器语言和汇编语言: 第一和第二代程序设计语言  </li>
<li>高级语言: 能够自动进行内存管理,类型一致性检查等功能的程序设计语言   </li>
</ul>
<p>翻译器: 能完成一种语言到另一种语言变换的软件</p>
<p>翻译器的不同形式:</p>
<ul>
<li>编译器(c,c++): 从源程序通过编译器得到目标程序,从输入通过目标程序得到输出(效率高,平台相关)</li>
<li>解释器(Python,JavaScript): 从源程序和输入经过解释器直接得到输出 (平台无关)  </li>
<li>区别: 编译器通过翻译来生成目标程序,解释器直接生成源程序指定的运算*</li>
<li>混和编译器(Java,C#): 源程序通过翻译器得到中间程序,中间程序和输入经过虚拟机得到输出(效率稍高,平台无关,但每个平台都要装虚拟机)</li>
</ul>
<p>语言处理系统: 预处理器,编译器,汇编器,连接器\加载器  </p>
<p>主要流程: 源程序-&gt;修改后的源程序-&gt;目标汇编程序-&gt;可重定位的机器代码-(库文件,可重定位目标文件)&gt;可执行目标程序</p>
<h3 id="编译器基本结构"><a href="#编译器基本结构" class="headerlink" title="编译器基本结构"></a>编译器基本结构</h3><p>编译器: 将源程序编译为目标可执行程序的系统<br>特点: 目标语言比源语言低级</p>
<h4 id="编译器结构"><a href="#编译器结构" class="headerlink" title="编译器结构"></a>编译器结构</h4><ul>
<li>分析部分,前端: 源程序-&gt;中间表示</li>
<li>综合部分,后端: 中间表示-&gt;目标程序</li>
</ul>
<p>前端,只依赖于源语言: 词法分析-&gt;语法分析-&gt;语义分析-&gt;中间代码生成</p>
<ul>
<li>词法分析: 识别词法单元,如变量、数字等</li>
<li>语法分析: 识别语句,得到语法树</li>
<li>语义分析: 识别语义的合理性,得到语义分析结果</li>
<li>中间代码生成: 得到中间表示</li>
</ul>
<p>后端,独立于源语言;和中间语言与目标机器有关: -&gt;代码优化-&gt;代码生成</p>
<ul>
<li>代码优化: 得到中间表示</li>
<li>代码生成: 得到可执行程序</li>
</ul>
<p>同一前端和不同后端组合可以得到同一源语言在不同机器上的编译器<br>不同前端和同一后端组合可以得到同一机器上的几个编译器</p>
<p>总体过程可以如下表示:<br><img src="/2020/02/24/compilers0/proc0.png" alt="progress"><br>编译的几个阶段常用一趟/遍（pass）扫描来实现，一趟/遍扫描 包括读一个输入文件和写一个输出文件。</p>
<h4 id="词法分析"><a href="#词法分析" class="headerlink" title="词法分析"></a>词法分析</h4><p>逐个扫描构成源程序的字符,把它们组成词法单元(token)流</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">position</span> = rate * <span class="number">60</span></span><br></pre></td></tr></table></figure>
<p>词法单元:</p>
<ul>
<li>标识符: position,rate</li>
<li>运算符: *</li>
<li>赋值符: =</li>
<li>数字: 60</li>
</ul>
<p>词法分析结果: *&lt;id,1&gt; &lt;=&gt; &lt;id,2&gt; &lt;*&gt; &lt;60&gt;*  </p>
<p>词法分析也可以叫做线性分析或扫描</p>
<h4 id="语法分析"><a href="#语法分析" class="headerlink" title="语法分析"></a>语法分析</h4><p>把词法单元流依照语言的语法结构按层次分组,来形式化成语法短语</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">position</span> = rate * <span class="number">60</span></span><br></pre></td></tr></table></figure>
<p>构建语法树:<br><img src="/2020/02/24/compilers0/ga0.png" alt="grammer analysis"></p>
<p>表达式、语句等程序层次结构通常由递归的规则表示</p>
<h4 id="语义分析"><a href="#语义分析" class="headerlink" title="语义分析"></a>语义分析</h4><p>检查程序语义的正确性,保证程序各个部分能有意义地结合在一起,为后面代码生成阶段手机类型信息  </p>
<p>语义分析包括:</p>
<ul>
<li>类型转换</li>
<li>类型检查</li>
<li>语法制导翻译</li>
</ul>
<p>语义分析结果:<br><img src="/2020/02/24/compilers0/ga1.png" alt="grammer analysis"></p>
<h4 id="中间代码生成"><a href="#中间代码生成" class="headerlink" title="中间代码生成"></a>中间代码生成</h4><p>生成一个位于高级编程语言和机器语言(目标程序)之间的中间代码  </p>
<p>一般有后缀表示,抽象语法树,三地址码表示法:<br><img src="/2020/02/24/compilers0/ga2.png" alt="grammer analysis"><br><em>三地址码表示中只有三个变量</em></p>
<h4 id="代码优化"><a href="#代码优化" class="headerlink" title="代码优化"></a>代码优化</h4><p>改进代码,以产生执行较快的机器代码:<br><img src="/2020/02/24/compilers0/ga3.png" alt="grammer analysis"></p>
<h4 id="目标程序生成"><a href="#目标程序生成" class="headerlink" title="目标程序生成"></a>目标程序生成</h4><p>生成可以重定位的机器代码或汇编码:<br><img src="/2020/02/24/compilers0/ga4.png" alt="grammer analysis">  </p>
<ul>
<li>为源程序所用的每个变量选择存储单元，并且把中间代码翻译成等价的机器指令序列。</li>
<li>关键问题是寄存器分配</li>
</ul>
<h4 id="关于符号表管理"><a href="#关于符号表管理" class="headerlink" title="关于符号表管理"></a>关于符号表管理</h4><p>编译器的一项重要工作是记录源程序中使用的标识符，并收集每个标识符的各种属性  </p>
<ul>
<li>这些属性提供标识符的存储分配、类型和作用域信息  </li>
<li>如果是过程标识符，还有参数的个数和类型、参数传递方式和返回值类型  </li>
</ul>
<p>符号表是为每个标识符保存一个记录的数据结构，记录的域是标识符的属性   </p>
<ul>
<li>该数据结构允许我们迅速地找到一个标识符的记录，在此记录中存储和读取数据 </li>
</ul>
<p>管理符号表:</p>
<ul>
<li>词法分析器发现源程序的标识符时，把该标识符填入符号表;但是,词法分析期间不能确定一个标识符的属性</li>
<li>其余的阶段把标识符的信息填入符号表，然后以不同的方式使用这些信息</li>
</ul>
<p><img src="/2020/02/24/compilers0/ga5.png" alt="grammer analysis"></p>
<h4 id="关于出错管理"><a href="#关于出错管理" class="headerlink" title="关于出错管理"></a>关于出错管理</h4><p>每个阶段都可能发现源程序的错误。发现错误后，该阶段必须处理此错误，使得编译可以继续进行，以便进一步发现源程序的其他错误。</p>
<ul>
<li>词法分析：当前被扫描的字符串不能形成语言的词法记号。</li>
<li>语法分析：记号流违反语言的语法规则。</li>
<li>语义分析：编译器试图找出语法正确但对所含的操作来说是无意义的结构，如相加的两个标识符，其一是数组名，另一个是过程名。</li>
</ul>
<h2 id="一个简单的语法制导翻译器"><a href="#一个简单的语法制导翻译器" class="headerlink" title="一个简单的语法制导翻译器"></a>一个简单的语法制导翻译器</h2><p>语法制导翻译器:</p>
<ul>
<li>词法分析</li>
<li>语法分析(上下文无关文法)</li>
<li>中间代码生成(语法知道翻译)</li>
</ul>
<p>前端模型如下:<br><img src="/2020/02/24/compilers0/ga5.png" alt="grammer analysis"></p>
<h3 id="词法分析-1"><a href="#词法分析-1" class="headerlink" title="词法分析"></a>词法分析</h3><p>源程序–(词法分析器)-&gt;词法单元序列</p>
<h4 id="词法分析基本原理"><a href="#词法分析基本原理" class="headerlink" title="词法分析基本原理"></a>词法分析基本原理</h4><p>词法分析基本步骤:</p>
<ul>
<li>剔除空白和注释</li>
<li>识别和计算常量</li>
<li>识别关键字和标识符  </li>
</ul>
<p>创建一个符合语法的状态机,并优化,编程实现它</p>
<p>下面代码可以不用细看,后面会细讲  </p>
<h4 id="剔除空白和注释"><a href="#剔除空白和注释" class="headerlink" title="剔除空白和注释"></a>剔除空白和注释</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> ( ; ; peek = next input character) &#123;    <span class="comment">// peek为预读字符</span></span><br><span class="line">       <span class="keyword">if</span>( peek is a blank or a tab ) <span class="keyword">do</span> nothing;</span><br><span class="line">       <span class="keyword">else</span> <span class="keyword">if</span>( peek is a newline) </span><br><span class="line">              line = line + <span class="number">1</span>;</span><br><span class="line">       <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>剔除空行和空白,直到扫描到下一个有效词法单元</p>
<h4 id="识别和计算常量"><a href="#识别和计算常量" class="headerlink" title="识别和计算常量"></a>识别和计算常量</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> ( peek holds a digit) &#123;</span><br><span class="line">       v = <span class="number">0</span>;</span><br><span class="line">       <span class="keyword">do</span> &#123;</span><br><span class="line">               v = v * <span class="number">10</span> + integer value of digit peek;</span><br><span class="line">               peek = next  input  character</span><br><span class="line">        &#125;<span class="keyword">while</span> ( peek holds a digit);</span><br><span class="line">        <span class="keyword">return</span> token (num, v);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="识别关键字和标识符"><a href="#识别关键字和标识符" class="headerlink" title="识别关键字和标识符"></a>识别关键字和标识符</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> ( peek 存放了一个字母) &#123;</span><br><span class="line">     将字母或数位读入一个缓冲区b;</span><br><span class="line">      s = b 中的字符形成的字符串;</span><br><span class="line">      w = words.get(s) 返回的词法单元；</span><br><span class="line">      <span class="keyword">if</span> ( w 不是 <span class="keyword">null</span>) <span class="keyword">return</span> w;</span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">             将键-值对(s, &lt;id, s&gt;)加入到words;</span><br><span class="line">              <span class="keyword">return</span> 词法单元&lt;id, s&gt;;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="主流程"><a href="#主流程" class="headerlink" title="主流程"></a>主流程</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">Token <span class="title">scan</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">       跳过空白符；</span><br><span class="line">       处理数字；</span><br><span class="line">       处理保留字和标识符；</span><br><span class="line">       <span class="comment">/*如果运行到这里，就将预读字符peek作为一个词法单元*/</span></span><br><span class="line">       Token t = <span class="keyword">new</span> Token (peek);</span><br><span class="line">        peek = 空白符 <span class="comment">/*按照预读的规则进行初始化,参见龙书p48*/</span>；</span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="词法分析建立的类"><a href="#词法分析建立的类" class="headerlink" title="词法分析建立的类"></a>词法分析建立的类</h4><p>各个对象关系如下:<br><img src="/2020/02/24/compilers0/proc1.png" alt="relatives"></p>
<p>Token类:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Token.java</span></span><br><span class="line">Package lexer;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Token</span> </span>&#123;</span><br><span class="line">      <span class="keyword">public</span>  <span class="keyword">final</span>  <span class="keyword">int</span>  tag;</span><br><span class="line">      <span class="function"><span class="keyword">public</span>  <span class="title">Token</span> <span class="params">( <span class="keyword">int</span>  t )</span> </span>&#123; tag = t; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Tag.java</span></span><br><span class="line">Package lexer;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Tag</span> </span>&#123;</span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">final</span>  <span class="keyword">static</span> <span class="keyword">int</span> </span><br><span class="line">     NUM = <span class="number">256</span>; ID = <span class="number">257</span>; TRUE = <span class="number">258</span>; FALSE = <span class="number">259</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//子类Num和Word</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Num.java</span></span><br><span class="line"><span class="keyword">package</span> lexer;              </span><br><span class="line"><span class="keyword">public</span>  <span class="class"><span class="keyword">class</span>  <span class="title">Num</span> <span class="keyword">extends</span> <span class="title">Token</span> </span>&#123;</span><br><span class="line">     <span class="keyword">public</span>  <span class="keyword">final</span> <span class="keyword">int</span> value;</span><br><span class="line">     <span class="function"><span class="keyword">public</span>  <span class="title">Num</span> <span class="params">( <span class="keyword">int</span> v )</span>  </span>&#123;<span class="keyword">super</span>(Tag.NUM); value = v; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Word.java</span></span><br><span class="line"><span class="keyword">package</span> lexer;            </span><br><span class="line"><span class="keyword">public</span>  <span class="class"><span class="keyword">class</span>  <span class="title">Word</span>  <span class="keyword">extends</span>  <span class="title">Token</span> </span>&#123;</span><br><span class="line">       <span class="keyword">public</span>  <span class="keyword">final</span>  String  lexeme;</span><br><span class="line">       <span class="function"><span class="keyword">public</span>  <span class="title">Word</span> <span class="params">( <span class="keyword">int</span> t, String s)</span>  </span>&#123;</span><br><span class="line">               <span class="keyword">super</span>(t); lexeme = <span class="keyword">new</span> String (s);</span><br><span class="line">       &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>词法分析器:Lexer</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Lexer.java</span></span><br><span class="line"><span class="keyword">package</span> lexer;                 </span><br><span class="line"><span class="keyword">import</span> java.io.*; <span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Lexer</span> </span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">int</span> line = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">char</span> peek = <span class="string">' '</span>;</span><br><span class="line">	<span class="keyword">private</span> Hashtable words = <span class="keyword">new</span> Hashtable();</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">reserve</span><span class="params">(Word t)</span> </span>&#123;words.put(t.lexeme, t);&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Lexer</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">		reserve(<span class="keyword">new</span> Word(Tag.TRUE, <span class="string">"true"</span>));</span><br><span class="line">		reserve(<span class="keyword">new</span> Word(Tag.FALSE, <span class="string">"false"</span>));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> Token <span class="title">scan</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">		<span class="keyword">for</span>( ; ; peek = (<span class="keyword">char</span>)System.in.read() ) &#123;</span><br><span class="line">			<span class="keyword">if</span>(peek == <span class="string">' '</span> || peek == <span class="string">'\t'</span>) <span class="keyword">continue</span>;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span>(peek == <span class="string">'\n'</span>) line = line + <span class="number">1</span>;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">        <span class="keyword">if</span>(Character.isDigit(peek)) &#123;</span><br><span class="line">			<span class="keyword">int</span> v = <span class="number">0</span>;</span><br><span class="line">			<span class="keyword">do</span> &#123;</span><br><span class="line">				v = <span class="number">10</span> * v + Character.digit(peek, <span class="number">10</span>);</span><br><span class="line">				peek = (<span class="keyword">char</span>)System.in.read();</span><br><span class="line">			&#125;<span class="keyword">while</span>(Character.isDigit(peek));</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">new</span> Num(v);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(Character.isLetter(peek)) &#123;</span><br><span class="line">			StringBuffer b = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">			<span class="keyword">do</span> &#123;</span><br><span class="line">				b.append(peek);</span><br><span class="line">				peek = (<span class="keyword">char</span>) System.in.read();</span><br><span class="line">			&#125;<span class="keyword">while</span>(Character.isLetterOrDigit(peek));</span><br><span class="line">			String s = b.toString();</span><br><span class="line">			Word w = (Word)words.get(s);</span><br><span class="line">			<span class="keyword">if</span>( w != <span class="keyword">null</span> ) <span class="keyword">return</span> w;</span><br><span class="line">			w = <span class="keyword">new</span> Word(Tag.ID, s);</span><br><span class="line">			words.put(s, w);</span><br><span class="line">			<span class="keyword">return</span> w;</span><br><span class="line">		&#125;</span><br><span class="line">		Token t = <span class="keyword">new</span> Token(peek);</span><br><span class="line">		peek = <span class="string">' '</span>;</span><br><span class="line">		<span class="keyword">return</span> t;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="语法分析-1"><a href="#语法分析-1" class="headerlink" title="语法分析"></a>语法分析</h3><p>语法分析是决定如何使用一个文法生成一个终结符号串的过程</p>
<p>举例如下:<br><img src="/2020/02/24/compilers0/proc3.png" alt="analysis">  </p>
<p>步骤:</p>
<ul>
<li>根据语法构建文法</li>
<li>根据文法构建预测分析表(LL文法,LR文法)</li>
</ul>
<h4 id="上下文无关文法-CFG"><a href="#上下文无关文法-CFG" class="headerlink" title="上下文无关文法 CFG"></a>上下文无关文法 CFG</h4><p>上下文无关文法(Context Free Grammar)由一个四元组G构成<br><img src="/2020/02/24/compilers0/gra0.png" alt="grammer"></p>
<p>在这里，有<br><img src="/2020/02/24/compilers0/gra1.png" alt="grammer"></p>
<p>例如，由+，-号分隔的数位序列可以由如下语法表示  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 终结符号集合 &#123;0,1,2,3,4,5,6,7,8,9,+,-&#125; (叶子节点)</span></span><br><span class="line"><span class="comment">// 非终结符号集合 &#123;list,digit&#125;</span></span><br><span class="line"><span class="comment">// 产生式集合:&#123;</span></span><br><span class="line">    list-&gt;list+digit</span><br><span class="line">    list-&gt;list-digit</span><br><span class="line">    list-&gt;digit</span><br><span class="line">    digit-&gt;<span class="number">0</span>|<span class="number">1</span>|<span class="number">2</span>|<span class="number">3</span>|<span class="number">4</span>|<span class="number">5</span>|<span class="number">6</span>|<span class="number">7</span>|<span class="number">8</span>|<span class="number">9</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 开始符号 list</span></span><br></pre></td></tr></table></figure>
<h4 id="预测分析表"><a href="#预测分析表" class="headerlink" title="预测分析表"></a>预测分析表</h4><p>NaN</p>
<h4 id="语法分析树"><a href="#语法分析树" class="headerlink" title="语法分析树"></a>语法分析树</h4><p>语法分析树用图形的方式展现从文法的开始符号推出相应符号串的过程  </p>
<p>从定义上看,给定一个上下文无关文法,该文法的一棵语法分析树(parse tree)是具有如下性质的树:</p>
<ol>
<li>根节点的标号为文法的开始符号</li>
<li>每个叶子节点的标号为一个终结符号或空串(e)</li>
<li>每个内部节点的标号为一个非终结符号</li>
<li>如果非终结符号A是某个内部节点的标号,并且它的子节点的标号从左到右分别为X1,X2…Xn,那么必然存在产生式A-&gt;X1,X2…Xn, 其中X1…Xn既可以是终结符号也可以是非终结符号</li>
</ol>
<p>例如:<br><img src="/2020/02/24/compilers0/tree0.png" alt="tree"></p>
<h4 id="左递归问题的消除"><a href="#左递归问题的消除" class="headerlink" title="左递归问题的消除"></a>左递归问题的消除</h4><p>考虑表达式 <code>yxxxx...x</code></p>
<p>原始公式:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">A -&gt; A x | y</span><br></pre></td></tr></table></figure>

<p>改进公式:将左递归化为循环</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">A -&gt; x R</span><br><span class="line">R -&gt; y R | e(空白符)</span><br></pre></td></tr></table></figure>

<p>效果如下:<br><img src="/2020/02/24/compilers0/recu0.png" alt="recursive"></p>
<h3 id="语法制导翻译"><a href="#语法制导翻译" class="headerlink" title="语法制导翻译"></a>语法制导翻译</h3><p>语法制导翻译的两种方式:</p>
<ul>
<li>语法制导定义</li>
<li>语法制导翻译方案</li>
</ul>
<h4 id="语法制导定义"><a href="#语法制导定义" class="headerlink" title="语法制导定义"></a>语法制导定义</h4><ul>
<li>每一个产生式和一组语义规则相关联</li>
<li>每个文法符号(非终结符)和一个属性集合相关联</li>
</ul>
<p>此时,产生式和语义规则是分离的,如下:<br><img src="/2020/02/24/compilers0/trans0.png" alt="trans"><br>语法制导定义类似于一种属性文法</p>
<h4 id="语法制导翻译方案"><a href="#语法制导翻译方案" class="headerlink" title="语法制导翻译方案"></a>语法制导翻译方案</h4><ul>
<li>将程序片段附加到一个文法的各个产生式上的表示</li>
<li>被嵌入到产生式体中的程序片段成为语义动作,语义动作用花括号括起来</li>
</ul>
<p>此时,语义是嵌入到产生式中的,如下:<br><img src="/2020/02/24/compilers0/trans1.png" alt="trans"></p>
<hr>
<p><em>待更新…</em></p>
]]></content>
      <categories>
        <category>notes</category>
        <category>学位课程</category>
      </categories>
      <tags>
        <tag>learning</tag>
        <tag>编译原理</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机组成相关知识</title>
    <url>/2020/02/24/computer-composition0/</url>
    <content><![CDATA[<p>未完结,持续更新</p>
<hr>
<p>课程内容:</p>
<ul>
<li>讨论单机系统范围内计算机各部件和系统的组成原理以及内部工作机制</li>
</ul>
<p>课程目标:</p>
<ul>
<li>计算机个大部件的组成原理</li>
<li>…的逻辑实现</li>
<li>…的设计方法</li>
<li>…互联构成整体系统的技术</li>
<li>(为后继课程的学习打好基础)</li>
</ul>
<p>课程地位: 承上启下</p>
<ul>
<li>先导课程: 计算机导论,数字逻辑</li>
<li>后继课程: 微机原理,接口技术,计算机系统结构</li>
</ul>
<p>重点难点:</p>
<ul>
<li>掌握五大基本部件的原理及实现</li>
<li>掌握各部件互联构成整机系统的知识(整机概念的建立)</li>
</ul>
<p>课程要求:</p>
<ul>
<li>重点掌握: 多层次的存储器,中央处理器</li>
<li>掌握: 运算方法和运算器,指令系统,总线系统</li>
<li>理解: 外存与io设备</li>
<li>了解: 计算机系统概论,输入输出系统</li>
</ul>
<a id="more"></a>

<h2 id="计算机系统概论"><a href="#计算机系统概论" class="headerlink" title="计算机系统概论"></a>计算机系统概论</h2><p>计算机的定义,分类.发展史</p>
<h3 id="计算机发展简史"><a href="#计算机发展简史" class="headerlink" title="计算机发展简史"></a>计算机发展简史</h3><p>计算机: 能够连续自动进行数值和逻辑运算的机器</p>
<p>分类:</p>
<ul>
<li>原理角度: 数字计算机,模拟计算机</li>
<li>性能指标: 巨型机,大型机,小型机,微型机</li>
<li>用途角度: 专用机,通用机</li>
</ul>
<p>计算机发展阶段:</p>
<ul>
<li>1946-1957: 电子管时代,ENIAC(1946)</li>
<li>1958-1964: 晶体管时代,整体性能大幅度提高,TRADIC(增加浮点运算)</li>
<li>1965-1971: 中小规模集成电路,进入文字处理和图形图像处理</li>
<li>1972-: 大和超大规模集成电路,出现微处理器</li>
</ul>
<h3 id="计算机性能指标和层次结构"><a href="#计算机性能指标和层次结构" class="headerlink" title="计算机性能指标和层次结构"></a>计算机性能指标和层次结构</h3><p>NAN</p>
<h3 id="计算机系统"><a href="#计算机系统" class="headerlink" title="计算机系统"></a>计算机系统</h3><h4 id="硬件系统的组成-冯诺依曼结构-以存储器为中心"><a href="#硬件系统的组成-冯诺依曼结构-以存储器为中心" class="headerlink" title="硬件系统的组成: 冯诺依曼结构,以存储器为中心"></a>硬件系统的组成: 冯诺依曼结构,以存储器为中心</h4><p>存储程序:</p>
<ul>
<li>计算机(硬件)应由运算器,存储器,控制器,出入设备,输出设备组成</li>
<li>计算机内部采用二进制来表示指令和数据</li>
<li>将编好的程序和原始数据实现存入存储器中然后再启动计算机工作</li>
</ul>
<p><img src="/2020/02/24/computer-composition0/compo0.png" alt="composition">  </p>
<p>其中:</p>
<blockquote>
<p>运算器,控制器一般为cpu<br>存储器一般由主存(内存)和辅存组成<br>cpu和主存一般构成主机<br>运算器: 数据的加工处理<br>控制器: 指令控制,操作控制,时序控制<br>存储器: 存放数据和程序<br>输入设备: 将外部数据送给计算机并转换成计算机能够识别的形式<br>输出设备: 将计算机处理结果送出给外界并转换成外界能够识别的形式</p>
</blockquote>
<ul>
<li>以运算器为核心的构造: 输入设备的数据得通过运算器才能进入存储器中</li>
<li>以存储器为核心的构造: 可以提高计算机系统运行的效率</li>
</ul>
<h4 id="软件系统的组成-应用软件-系统软件"><a href="#软件系统的组成-应用软件-系统软件" class="headerlink" title="软件系统的组成: 应用软件,系统软件"></a>软件系统的组成: 应用软件,系统软件</h4><p>系统软件:</p>
<ul>
<li>操作系统: 硬件软件之间的桥梁</li>
<li>语言程序</li>
<li>服务性程序</li>
<li>DMZ</li>
</ul>
<p>软件和硬件之间存在着逻辑等价关系</p>
<h2 id="计算机中常用的组合逻辑电路"><a href="#计算机中常用的组合逻辑电路" class="headerlink" title="计算机中常用的组合逻辑电路"></a>计算机中常用的组合逻辑电路</h2><h3 id="组合逻辑电路"><a href="#组合逻辑电路" class="headerlink" title="组合逻辑电路"></a>组合逻辑电路</h3><h4 id="三态门"><a href="#三态门" class="headerlink" title="三态门"></a>三态门</h4><p>三态门: 0,1,高阻态Z<br><img src="/2020/02/24/computer-composition0/compo1.png" alt="composition">  </p>
<h4 id="异或门"><a href="#异或门" class="headerlink" title="异或门"></a>异或门</h4><p><img src="/2020/02/24/computer-composition0/compo2.png" alt="composition"></p>
<p>异或门应用:</p>
<ul>
<li><p>数码比较器(上图)  </p>
</li>
<li><p>原码/反码输出电路<br><img src="/2020/02/24/computer-composition0/compo3.png" alt="composition"></p>
</li>
<li><p>奇偶检测电路</p>
</li>
<li><p>半加器</p>
</li>
<li><p>全加器</p>
</li>
<li><p>n位加法器</p>
</li>
<li><p>超前进位加法器</p>
</li>
<li><p>ALU算术逻辑单元</p>
</li>
<li><p>译码器</p>
</li>
<li><p>数据选择器</p>
</li>
</ul>
<h3 id="时序逻辑电路"><a href="#时序逻辑电路" class="headerlink" title="时序逻辑电路"></a>时序逻辑电路</h3><hr>
<p><em>待更新…</em></p>
]]></content>
      <categories>
        <category>notes</category>
        <category>学位课程</category>
      </categories>
      <tags>
        <tag>learning</tag>
        <tag>计算机组成</tag>
      </tags>
  </entry>
  <entry>
    <title>Java学习笔记</title>
    <url>/2020/02/24/java0/</url>
    <content><![CDATA[<p>未完结,持续更新</p>
<hr>
<h2 id="Java常识"><a href="#Java常识" class="headerlink" title="Java常识"></a>Java常识</h2><p>Java: 一次编译，处处运行</p>
<h3 id="Java特点"><a href="#Java特点" class="headerlink" title="Java特点"></a>Java特点</h3><p>c++ - -</p>
<ul>
<li>无直接指针操作</li>
<li>自动内存管理</li>
<li>数据类型长度固定</li>
<li>不用头文件</li>
<li>不包含结构和联合</li>
<li>不支持宏</li>
<li>不用多重继承(接口实现)</li>
<li>无类外全局变量</li>
<li>无goto</li>
</ul>
<p>Java三种核心机制</p>
<ul>
<li>Java虚拟机</li>
<li>代码安全性监测</li>
<li>垃圾回收机制</li>
</ul>
<p><em>Java程序都是运行在虚拟机之上的,与平台无关</em></p>
<ul>
<li>JRE(java运行环境)=JVM+API</li>
<li>JDK(Java开发工具包)=JRE+Tools</li>
</ul>
<a id="more"></a>

<h3 id="Java面向对象程序设计"><a href="#Java面向对象程序设计" class="headerlink" title="Java面向对象程序设计"></a>Java面向对象程序设计</h3><p>类</p>
<ul>
<li>属性: 变量,字段</li>
<li>行为: 函数,方法</li>
</ul>
<p>类与对象的关系</p>
<ul>
<li>类是对象的抽象</li>
<li>对象是类的实例</li>
</ul>
<p>面向对象三大特性</p>
<ul>
<li>封装: 模块化,信息隐蔽</li>
<li>继承: 父类子类间共享数据,更好地抽象和分类,增强代码重用性和可维护性</li>
<li>多态: 方法重载</li>
</ul>
<h3 id="简单Java程序"><a href="#简单Java程序" class="headerlink" title="简单Java程序"></a>简单Java程序</h3><p>Java程序类型:</p>
<ul>
<li>Application: 独立程序,需要执行器(虚拟机)来运行</li>
<li>Applect: 非独立程序,嵌入在HTML网页中运行</li>
</ul>
<p>应用程序要点(helloword)</p>
<ul>
<li>class是主体</li>
<li>public类名与文件名同名</li>
<li>main()的写法是固定的: public static void main()</li>
<li>System.out.print及println及printf</li>
</ul>
<p>Applet程序(helloword)</p>
<ul>
<li>import表示导入</li>
<li>extends JApplet表示继承</li>
<li>有paint()方法,表示如何绘制</li>
<li>没有main()方法</li>
</ul>
<p>Java程序基本构成</p>
<ul>
<li>package语句(0或1句)</li>
<li>import语句(0或多句)</li>
<li>类定义(1或多个,但只能有一个public类,与文件同名)</li>
</ul>
<h3 id="Java程序开发过程"><a href="#Java程序开发过程" class="headerlink" title="Java程序开发过程"></a>Java程序开发过程</h3><p>编辑,编译与运行</p>
<ul>
<li>编辑: 编辑器编辑,文件名要与public class类名一致</li>
<li>程序编译: 转换程序为字节码,扩展名.class  javac name.java</li>
<li>程序运行: 执行.class中的文件    java name</li>
</ul>
<p>JDK安装目录</p>
<blockquote>
<p>Bin 存放工具文件<br>Jre 存放与Java运行环境相关的文件<br>Demo 存放示例文件<br>Include 存放与C相关的头文件<br>Lib 存放程序库<br>DB 数据库相关</p>
</blockquote>
<h3 id="Java的几个工具"><a href="#Java的几个工具" class="headerlink" title="Java的几个工具"></a>Java的几个工具</h3><p>主要工具</p>
<ul>
<li>javac 编译</li>
<li>java 运行(控制台及图形界面程序)</li>
<li>javaw 运行图形界面程序</li>
<li>appletViewer 运行applet程序</li>
</ul>
<p>另外常用工具</p>
<ul>
<li>jar 打包工具</li>
<li>javadoc 生成文档</li>
<li>javap 查看类信息及反汇编</li>
</ul>
<h3 id="Java的输入和输出"><a href="#Java的输入和输出" class="headerlink" title="Java的输入和输出"></a>Java的输入和输出</h3><h4 id="文本界面-使用Scanner类"><a href="#文本界面-使用Scanner类" class="headerlink" title="文本界面: 使用Scanner类"></a>文本界面: 使用Scanner类</h4><p>使用java.util.Scanner类</p>
<ul>
<li>Scanner.nextInt()</li>
<li>Scanner.nextDouble()</li>
<li>Scanner.next 得到下一个单词<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ScannerTest</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">( String[] args)</span></span>&#123;</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> a = scanner.nextInt();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="使用in及out"><a href="#使用in及out" class="headerlink" title="使用in及out"></a>使用in及out</h4><p>使用java.io包</p>
<ul>
<li>System.in.read()</li>
<li>System.out.print()<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> c = <span class="string">''</span>;</span><br><span class="line">System.out.print(<span class="string">'Hello'</span>);</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    c = (<span class="keyword">char</span>)System.in.read();</span><br><span class="line">&#125;<span class="keyword">catch</span>(IOExceprion e)&#123;&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="图形界面输入输出"><a href="#图形界面输入输出" class="headerlink" title="图形界面输入输出"></a>图形界面输入输出</h4><p>添加按钮,监听事件…</p>
<h3 id="集成开发环境"><a href="#集成开发环境" class="headerlink" title="集成开发环境"></a>集成开发环境</h3><h4 id="eclips"><a href="#eclips" class="headerlink" title="eclips"></a>eclips</h4><p>java里的程序应当都以工程的形式存在</p>
<ul>
<li>新建一个工程，起一个名字(文件夹的名字)</li>
<li>在src文件夹中建立package包(一般小写字母)</li>
<li>在package里面建立类(首字母大写)</li>
<li>写主函数…</li>
<li>右击包文件 run as application</li>
</ul>
<hr>
<p><em>待更新…</em></p>
]]></content>
      <categories>
        <category>notes</category>
        <category>学位课程</category>
      </categories>
      <tags>
        <tag>learning</tag>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>python作图</title>
    <url>/2020/02/12/python-plot1/</url>
    <content><![CDATA[<p>一些参考网站:<br><a href="https://zhuanlan.zhihu.com/p/39077155" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/39077155</a><br><a href="https://zhuanlan.zhihu.com/p/49035741" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/49035741</a><br><a href="https://zhuanlan.zhihu.com/p/27401041" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/27401041</a><br><a href="https://zhuanlan.zhihu.com/p/37360133" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/37360133</a><br><a href="https://mp.weixin.qq.com/s?__biz=MzUzODYwMDAzNA==&amp;mid=2247488701&amp;idx=4&amp;sn=73c8ca23d8eced3590ab285f9f43d99b&amp;chksm=fad463b0cda3eaa6f9be051e3c1e0c1a7ddc8922c5c6bf1dfa75f2db84affb88fa248760b781&amp;mpshare=1&amp;scene=23&amp;srcid=&amp;sharer_sharetime=1581401241375&amp;sharer_shareid=ab6f5905c1aa5f4891f8d87e4501862b#rd" target="_blank" rel="noopener">https://mp.weixin.qq.com/s?__biz=MzUzODYwMDAzNA==&amp;mid=2247488701&amp;idx=4&amp;sn=73c8ca23d8eced3590ab285f9f43d99b&amp;chksm=fad463b0cda3eaa6f9be051e3c1e0c1a7ddc8922c5c6bf1dfa75f2db84affb88fa248760b781&amp;mpshare=1&amp;scene=23&amp;srcid=&amp;sharer_sharetime=1581401241375&amp;sharer_shareid=ab6f5905c1aa5f4891f8d87e4501862b#rd</a>  </p>
]]></content>
      <categories>
        <category>notes</category>
      </categories>
      <tags>
        <tag>learning</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>matlab常用语法</title>
    <url>/2020/02/09/matlab/</url>
    <content><![CDATA[<p>仅作随笔用,不完善不严谨</p>
<h3 id="变量-符号-数组-矩阵"><a href="#变量-符号-数组-矩阵" class="headerlink" title="变量 符号 数组 矩阵"></a>变量 符号 数组 矩阵</h3><h4 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h4><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&lt;var&gt; = &lt;expression&gt;</span><br></pre></td></tr></table></figure>

<p>预定义变量   </p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="built_in">pi</span>  <span class="comment">% 圆周率</span></span><br><span class="line"><span class="built_in">inf</span> <span class="comment">% 又Inf,无穷大</span></span><br><span class="line"><span class="built_in">nan</span> <span class="comment">% 又NaN,不定值</span></span><br><span class="line"><span class="built_in">eps</span> <span class="comment">% 浮点数运算相对精度,无穷小</span></span><br><span class="line"><span class="built_in">i</span>   <span class="comment">% 又j,虚部单位</span></span><br><span class="line"><span class="built_in">ans</span> <span class="comment">% 上一次运算结果</span></span><br></pre></td></tr></table></figure>

<p>变量存储 读取 清除  </p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">save [filename.mat] [var1] [var2] ...</span><br><span class="line">load &lt;filename.mat&gt; [var1] [var2] ...</span><br><span class="line">clear [var1] [var2]</span><br></pre></td></tr></table></figure>

<p>相关命令</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">who <span class="comment">% 显示工作空间中的所有变量  </span></span><br><span class="line">whos    <span class="comment">% 查看工作空间中变量的详细属性 </span></span><br><span class="line"><span class="built_in">realmin</span> <span class="comment">% 最小可用正实数</span></span><br><span class="line"><span class="built_in">realmax</span> <span class="comment">% 最大可用正实数</span></span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h4 id="符号-符号表达式"><a href="#符号-符号表达式" class="headerlink" title="符号 符号表达式"></a>符号 符号表达式</h4><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">syms [symbol1] &lt;symbol2&gt; &lt;symbol3&gt; ...  <span class="comment">% 创建多个符号变量, 相当于symbol1 = sym('symbol'); symbol2 = sym('symbol2'); ...</span></span><br><span class="line">[symbol] = sym([symbol/value/symbolexpression])  <span class="comment">% 用符号/数值/表达式来创建符号变量/常量/表达式</span></span><br></pre></td></tr></table></figure>

<p>相关函数  </p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">findsym(expression [, N])   <span class="comment">% 查找符号表达式中的[离x最近的N个]符号变量</span></span><br><span class="line">subs(expression, symbol1, symbol2)  <span class="comment">% 在表达式中用s2替换s1</span></span><br></pre></td></tr></table></figure>

<h4 id="数组-矩阵"><a href="#数组-矩阵" class="headerlink" title="数组 矩阵"></a>数组 矩阵</h4><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">[matrix] = [row1 ; row2 ; ... ]</span><br><span class="line">[row] = [sym1 sym2 ...] <span class="comment">% row = start: step: end</span></span><br><span class="line">[matrix](n) = value <span class="comment">% 元素赋值</span></span><br><span class="line">[matrix] = [matrix ; matrix2]   <span class="comment">% 矩阵列拼接</span></span><br><span class="line">[matrix] = [matrix matrix2] <span class="comment">% 矩阵行拼接</span></span><br></pre></td></tr></table></figure>

<p>相关操作</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">A(i1 : step : i2, j1 : step : j2)   <span class="comment">% 矩阵切片</span></span><br><span class="line">.* ./ .^    <span class="comment">% 点乘点除点幂乘</span></span><br></pre></td></tr></table></figure>

<h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><h4 id="基本函数"><a href="#基本函数" class="headerlink" title="基本函数"></a>基本函数</h4><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sin</span>、<span class="built_in">cos</span>、<span class="built_in">tan</span>、<span class="built_in">cot</span>、<span class="built_in">sec</span>、<span class="built_in">csc</span>、…</span><br><span class="line"><span class="built_in">asin</span>、<span class="built_in">acos</span>、<span class="built_in">atan</span>、<span class="built_in">acot</span>、<span class="built_in">asec</span>、<span class="built_in">acsc</span>、…</span><br><span class="line"><span class="built_in">exp</span>、<span class="built_in">log</span>、<span class="built_in">log2</span>、<span class="built_in">log10</span>、<span class="built_in">sqrt</span></span><br><span class="line"><span class="built_in">abs</span>、<span class="built_in">conj</span>、<span class="built_in">real</span>、<span class="built_in">imag</span></span><br><span class="line">rank、det、inv、eig、lu、qr、svd</span><br><span class="line"><span class="built_in">diag</span>、<span class="built_in">triu</span>、<span class="built_in">tril</span>、expm</span><br></pre></td></tr></table></figure>

<p>相关命令  </p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">findsym(expr)   <span class="comment">% 按字母顺序列出符号表达式 expr 中的所有符号变量</span></span><br><span class="line">findsym(expr, N)    <span class="comment">% 按顺序列出 expr 中离 x 最近的 N 个符号变量</span></span><br><span class="line">nargin  <span class="comment">% 所用函数的输入变量数目</span></span><br><span class="line">nargout <span class="comment">% 所用函数的输出变量数目</span></span><br></pre></td></tr></table></figure>

<p>####　运算函数</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="built_in">factor</span>(f)   <span class="comment">% 因式分解或质因数分解</span></span><br><span class="line">expand(f)   <span class="comment">% 函数展开</span></span><br><span class="line">taylor(f,x,a)   <span class="comment">% f关于符号x在a处进行5项泰勒展开</span></span><br><span class="line">collect(f,v)    <span class="comment">% f对(默认变量)v进行合并同类项</span></span><br><span class="line">simplify(f) <span class="comment">% 对f化简函数</span></span><br><span class="line">numden(f)   <span class="comment">% 函数化简 -&gt; [N,D] N为分子,D为分母</span></span><br><span class="line">horner(f)   <span class="comment">% 多项式转嵌套多项式 x(...x(x+i)+j)+k</span></span><br></pre></td></tr></table></figure>

<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">limit(fun,x,x0 [, <span class="string">'left'</span>/<span class="string">'right'</span>])  <span class="comment">% 在fun中对符号x在x0处求极限</span></span><br><span class="line">int(f [, v, a, b])  <span class="comment">% 在f中对(默认)变量[v][在区间(a,b)上]的(不)定积分</span></span><br><span class="line">symsum(f, v, a, b)  <span class="comment">% 在v=a,a+1....b上对f(v)进行求和</span></span><br><span class="line">solve(f,v)  <span class="comment">% 求方程(组)关于指定自变量的解</span></span><br><span class="line">y=dsolve(eq1, eq2, ..., cond1, cond2, ..., v)   <span class="comment">% 微分方程eq1,eq2...在cond1,cond2...为初值条件下自变量v的解 -&gt; 输出解y,若无显式函数,则输出[x,y]</span></span><br><span class="line">finverse(f,v)   <span class="comment">% f关于(默认变量)v的反函数</span></span><br></pre></td></tr></table></figure>

<h4 id="多项式函数"><a href="#多项式函数" class="headerlink" title="多项式函数"></a>多项式函数</h4><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">p = [a1, a2, a3, a4 ...]    <span class="comment">% 多项式降幂系数的行向量表示</span></span><br><span class="line">r = roots(p)    <span class="comment">% 求出多项式为0的根</span></span><br><span class="line">p = poly(r) <span class="comment">% 通过多项式为0的根求出多项式</span></span><br><span class="line">c = conv(a,b)   <span class="comment">% 多项式相乘</span></span><br><span class="line">[q, r] = deconv(c, b)   <span class="comment">% 多项式相除</span></span><br><span class="line">d = polyder(a)  <span class="comment">% 微分多项式</span></span><br><span class="line">n = polyval(a, <span class="number">2</span>)   <span class="comment">% 多项式函数求值</span></span><br><span class="line">p = polyfit(x,y,n)  <span class="comment">% 在x, y样本点向量下求出一个n阶多项式的拟合p</span></span><br><span class="line">[a,Jm] = lsqcurvefit(Fun,a0,x,y)    <span class="comment">% 最小二乘曲线拟合,Fun为原函数，x,y 为原始输入数据,a0为最优化初值，a为最小二乘系数，Jm为目标</span></span><br><span class="line">yi = interp1(x, y, xi, <span class="string">'method'</span>)    <span class="comment">% 一维插值计算</span></span><br><span class="line">zi = interp2(x，y，z，xi，yi，<span class="string">'method'</span>)  <span class="comment">% 二维插值计算</span></span><br></pre></td></tr></table></figure>

<h4 id="作图函数"><a href="#作图函数" class="headerlink" title="作图函数"></a>作图函数</h4><p>参考<a href="https://www.cnblogs.com/ileanj1998/p/9060664.html" target="_blank" rel="noopener">https://www.cnblogs.com/ileanj1998/p/9060664.html</a></p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="built_in">plot</span>(x,y)   <span class="comment">% x 为向量, y为x的函数或者同长度向量</span></span><br><span class="line">xlabel(<span class="string">'x'</span>) ylabel(<span class="string">'y'</span>) <span class="comment">% 坐标轴信息]</span></span><br></pre></td></tr></table></figure>

<h3 id="其他技巧"><a href="#其他技巧" class="headerlink" title="其他技巧"></a>其他技巧</h3><ul>
<li>若不想在屏幕上输出结果，可以在语句最后加分号  </li>
<li>如果语句很长，可用续行符 “…”（三个点）续行,续行符的前面最好留一个空格</li>
<li>Matlab 的命令记忆功能：上下箭头键  </li>
<li>命令补全功能： Tab 键   </li>
<li>用 Esc 键 删除命令行</li>
</ul>
]]></content>
      <categories>
        <category>notes</category>
      </categories>
      <tags>
        <tag>learning</tag>
        <tag>matlab</tag>
      </tags>
  </entry>
  <entry>
    <title>From Flour to Rolls</title>
    <url>/2020/02/08/making-rolls/</url>
    <content><![CDATA[<p><em>这是一次从面粉到面花卷过程</em>  </p>
<hr>
<a id="more"></a>

<ol>
<li>一斤玉米面、一斤荞麦面、一斤白面、一包奶粉一勺糖，混合均匀  </li>
</ol>
<p><img src="/2020/02/08/making-rolls/flour1.jpg" alt="alt">  </p>
<ol start="2">
<li>35度以下,将干酵母放入水中,混合搅拌均匀  </li>
</ol>
<p><img src="/2020/02/08/making-rolls/flour2.jpg" alt="alt">  </p>
<p><em>一斤面粉放2g干酵母</em>  </p>
<p><img src="/2020/02/08/making-rolls/flour3.jpg" alt="alt"></p>
<p><em>倒入水中混合</em>  </p>
<ol start="3">
<li>将水和面粉混合  </li>
</ol>
<p><img src="/2020/02/08/making-rolls/flour4.jpg" alt="alt"> </p>
<ol start="4">
<li>搅匀  </li>
</ol>
<p><img src="/2020/02/08/making-rolls/flour5.jpg" alt="alt">  </p>
<p><img src="/2020/02/08/making-rolls/flour6.jpg" alt="alt"> </p>
<p><em>最后的样子</em></p>
<ol start="5">
<li>将面放在温暖的地方静置一会</li>
</ol>
<p><img src="/2020/02/08/making-rolls/flour7.jpg" alt="alt">  </p>
<p><img src="/2020/02/08/making-rolls/flour8.jpg" alt="alt">  </p>
<p><em>等待发面中…</em></p>
<ol start="6">
<li>稍微加亿点处理……  </li>
</ol>
<p><em>这儿没有图</em></p>
<ol start="7">
<li>结束</li>
</ol>
<p><img src="/2020/02/08/making-rolls/flour9.jpg" alt="alt">  </p>
<p><em>结束!成品如上</em></p>
<hr>
<p>至于这个花卷最后嘛…<br>嗯,有点丑,但能吃</p>
<!--本来其实是想写一篇关于如何在hexo上发图片的博客,但是感觉没啥意思...  
如果是真的想知道如何在markdown中插入图片,可以看这儿<https://www.jianshu.com/p/81ce308e894c>  
这一篇就当是我拿来练练手发发图片的吧  
还是吃太饱了... --> 
]]></content>
      <categories>
        <category>life</category>
      </categories>
      <tags>
        <tag>life</tag>
        <tag>playing</tag>
      </tags>
  </entry>
  <entry>
    <title>使用termux在安卓系统下搭建hexo-github博客编写环境</title>
    <url>/2020/02/07/android-hexo-setting/</url>
    <content><![CDATA[<p>在hexo已经部署到github的情况下，本文将记录如何把自己的移动设备(安卓手机、平板)变成可以编辑并上传博客的平台。  </p>
<p>关于如何在github上搭建hexo，详见<a href="https://zhuanlan.zhihu.com/p/44213627" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/44213627</a><br>注意：使用多终端更新博客之前，请确保自己的博客系统在github上面同时有编译前、后两个分支，多终端更新方法可参考<a href="https://keyanbu.club/2020/02/05/guide/" target="_blank" rel="noopener">https://keyanbu.club/2020/02/05/guide/</a></p>
<p>本博文使用matepad pro在安卓环境下编写完成。  </p>
<a id="more"></a>

<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>由于安卓系统下没有直接支持git及hexo的软件，我们使用termux来虚拟出一个linux环境，在终端中安装git及相关包，使用vim或安卓的相关文本编辑器(我用的920编辑器)来编写博文，用termux终端同步博客。  </p>
<p>相关问题：</p>
<ul>
<li>使用termux的pkg安装nodejs时可能会出现与npm版本不兼容的情况，安装nodejs-lts可解决。</li>
<li>使用在使用hexo generate生成博客时可能会出现网页排版错误，尚未解决。  </li>
</ul>
<p>以下所有操作都相对小白，懂的可以直接略过  </p>
<h3 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h3><p>除了安装termux之外，其他操作几乎和电脑上是一样的</p>
<ul>
<li>安装termux</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 自己去网上找安装包安装，这里不说了</span></span><br><span class="line"><span class="comment"># 安装好之后进入termux，应该是一个显示如下的终端</span></span><br><span class="line"></span><br><span class="line">Welcome to Termux!</span><br><span class="line"></span><br><span class="line">Wiki:            https://wiki.termux.com</span><br><span class="line">Community forum: https://termux.com/community</span><br><span class="line">Gitter chat:     https://gitter.im/termux/termux</span><br><span class="line">IRC channel:     <span class="comment">#termux on freenode</span></span><br><span class="line"></span><br><span class="line">Working with packages:</span><br><span class="line"></span><br><span class="line"> * Search packages:   pkg search &lt;query&gt;</span><br><span class="line"> * Install a package: pkg install &lt;package&gt;</span><br><span class="line"> * Upgrade packages:  pkg upgrade</span><br><span class="line"></span><br><span class="line">Subscribing to additional repositories:</span><br><span class="line"></span><br><span class="line"> * Root:     pkg install root-repo</span><br><span class="line"> * Unstable: pkg install unstable-repo</span><br><span class="line"> * X11:      pkg install x11-repo</span><br><span class="line"></span><br><span class="line">Report issues at https://termux.com/issues</span><br><span class="line"></span><br><span class="line">$</span><br></pre></td></tr></table></figure>

<ul>
<li>安装git</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ pkg install git</span><br></pre></td></tr></table></figure>

<ul>
<li>设置git全局邮箱和用户名</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git config --global user.name <span class="string">"yourname"</span></span><br><span class="line">$ git config --global user.email <span class="string">"youremail"</span></span><br></pre></td></tr></table></figure>

<ul>
<li>设置ssh key  </li>
</ul>
<p>这里得先安openssh  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ pkg install openssh</span><br></pre></td></tr></table></figure>
<p>然后生成ssh key  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C <span class="string">"youremail"</span></span><br><span class="line"><span class="comment"># 然后一路默认回车即可</span></span><br></pre></td></tr></table></figure>
<p>这里注意，生成的ssh_key路径是在隐藏目录home/.ssh下的，需要进入˜/.ssh用vim打开id_rsa.pub复制公钥。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 此时是默认home路径</span></span><br><span class="line">$ <span class="built_in">cd</span> .ssh    <span class="comment"># 切换到.ssh目录</span></span><br><span class="line">$ vim id_rsa.pub</span><br><span class="line"><span class="comment"># 此时进入vim编辑器，屏幕上显示内容应该和如下类似</span></span><br><span class="line"></span><br><span class="line">ssh-rsa AAAADAQABAAABgQC8uwcEZdQna+zv/HTa2W4I</span><br><span class="line">AvqiNyKxgVdi07ce8hRTpb/lejdVK5rux7jOkWM00Pl73</span><br><span class="line">7qTKXAgWkgVckflinjfd6bxgOEA0ZUYRcFjuMYNccOdWO</span><br><span class="line">XDfmX0w4GYaKhGG5RMsWxVsNSfoskjYpCs1fiSTvM49Y6</span><br><span class="line">FWsEzyXaQ46VWedZJKqEhVPoAtZOEmNOi0krsqymzfjZj</span><br><span class="line">7/iVzuZiFP/zN5itPJXHvYMTA0OzDiPo3qHGHW8yvUpPd</span><br><span class="line">mSY65mXUk1odGmUMBo3/VoOW9ki9t0G6BTqK4lW4qijII</span><br><span class="line">lhrVocrs6APlyAuyPbi5cCtrwQxJSd6J+h8d9t9qdZD/E</span><br><span class="line">DUUdh63jdk07vmlv/+qUza15SZaAptfmFFbKOES8b7qfk</span><br><span class="line">iUXvCr+kCH36lz+rTbF75cW1aU3dJ1/WWj3jgumVyqeMU</span><br><span class="line">bE/OiF3ZBQA7mmz93Jho+Wis5mG07QjI3f18d+ZG0xonf</span><br><span class="line">wg+sjQf3fIujCPq99PcKlM= georgechen1827@gmail.</span><br><span class="line">com</span><br><span class="line">~</span><br><span class="line">~</span><br><span class="line">~</span><br><span class="line">~</span><br><span class="line">~</span><br><span class="line">id_rsa.pub                1,1            All</span><br></pre></td></tr></table></figure>
<p>复制从ssh到.com的内容，粘贴到你的github-&gt;settings-&gt;SSH and GPG keys-&gt;New SSH key-&gt;Key中(Title随便取个名就行),Add SSH key即可<br>然后回到终端，退出vim并且测试一下是否可以通过git连上github</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 关于退出vim，只要输入':q'回车就行</span></span><br><span class="line">$ ssh -T git@github.com    <span class="comment"># 测试是否能够连上github，第一次可能需要连接确认</span></span><br></pre></td></tr></table></figure>
<p>顺便说一句，这个终端中所有的目录和文件都是termux应用的内部数据，从外部(如安卓手机上的文件管理器)一般是访问不到的(比如这个id_rsa.pub就无法从外部来访问)，如果你所操作的文件是在外部存储中；或者想将文件保存在外部存储中，需要给予termux访问存储设备的权限，具体操作下一节会讲到。  </p>
<ul>
<li>安装nodejs</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ pkg install nodejs-lts</span><br><span class="line"><span class="comment"># 如果这里 pkg install nodejs 可能会出现npm与nodejs版本不兼容问题，具体原因未知</span></span><br><span class="line"><span class="comment"># 如果termux没有安装npm，需要pkg install npm</span></span><br><span class="line"><span class="comment"># 通过node -v和npm -v可以查看相应的版本</span></span><br></pre></td></tr></table></figure>

<ul>
<li>安装hexo</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-cli -g</span><br></pre></td></tr></table></figure>

<ul>
<li>git自己的博客源文件</li>
</ul>
<p>先cd到你想存放博客的某个文件夹下(如果可以的话，我建议将这个文件夹设在一个能被其他应用访问到的地方，具体操作见下一节)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> git@github.com:yourname/yourname.github.io.git</span><br><span class="line"><span class="comment"># clone你的博客源文件</span></span><br></pre></td></tr></table></figure>

<ul>
<li>生成部署编写…</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> yourname.github.io</span><br><span class="line">$ npm install</span><br><span class="line">$ npm install hexo-deployer-git --save</span><br><span class="line">$ hexo g</span><br><span class="line">$ hexo d</span><br></pre></td></tr></table></figure>
<p>然后就可以开始写博客啦！</p>
<h3 id="关于termux访问外部存储"><a href="#关于termux访问外部存储" class="headerlink" title="关于termux访问外部存储"></a>关于termux访问外部存储</h3><p>上面讲过，termux终端中所有的目录和文件都是作为应用的内部数据存在的，从外部一般访问不到(当然理论上是能访问到的，只是我水平有限)，如果你将博客源文件放在了home目录中，那就意味着你只能用termux中的vim编辑器写博文了，这既不方便也不优雅。  </p>
<p>在此，我的建议是，将你的博客文件存到外部存储(一个容易被你手机/平板的文件管理器访问到的)中，然后做一个文件夹的软链接到你的home目录下，这样即能够使用你手机/平板上其他的app来编辑博文，又方便你在终端中用命令同步文件(软链接可以省去输入难以记住的路径信息)。  </p>
<p>具体操作如下:  </p>
<ul>
<li>开放存储访问权限</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ apt install termux-tools <span class="comment"># 这是termux自带的管理工具</span></span><br><span class="line">$ termux-setup-storage <span class="comment"># 设置存储访问权限</span></span><br><span class="line"><span class="comment"># 这个时候手机应该会跳出一个权限确认弹窗，点击确定</span></span><br></pre></td></tr></table></figure>

<ul>
<li>链接一个合适的文件夹到home目录下  </li>
</ul>
<p>开放存储访问权限之后，你可以在home目录下发现一个新目录storage，如下:  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># home目录下</span></span><br><span class="line">$ dir</span><br><span class="line">storage</span><br><span class="line">$ <span class="built_in">cd</span> storage <span class="comment"># storage目录里面是一些常用文件夹</span></span><br><span class="line">$ dir</span><br><span class="line">dcim       movies  pictures</span><br><span class="line">downloads  music   shared</span><br><span class="line">$ <span class="built_in">cd</span> shared <span class="comment"># shared文件夹里面就是你安卓设备能访问到的根目录(不严谨地说)</span></span><br><span class="line">$ dir</span><br><span class="line">ANRSnap        Alarms         </span><br><span class="line">Android        BaiduMapAuto   </span><br><span class="line">DCIM           Documents      </span><br><span class="line">Download       Fonts          </span><br><span class="line">Foxit          GDTDOWNLOAD    </span><br><span class="line">Huawei         HuaweiSystem   </span><br><span class="line">Movies         Music          </span><br><span class="line">Notifications  Pictures</span><br></pre></td></tr></table></figure>

<p>我个人是这样做的:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># shared目录下</span></span><br><span class="line">$ mkdir github <span class="comment"># 创建一个github文件夹，以后里面也可以clone其他项目</span></span><br><span class="line">$ <span class="built_in">cd</span> ˜ <span class="comment"># 回到home目录</span></span><br><span class="line">$ ln -s ˜/storage/shared/github github <span class="comment"># 将刚刚创建的文件夹链接到home目录下，方便以后访问</span></span><br><span class="line">$ <span class="built_in">cd</span> github</span><br><span class="line">$ git <span class="built_in">clone</span> git@github.com:yourname/yourname.github.io.git <span class="comment"># 做clone，具体不细讲，上一节有</span></span><br><span class="line">$ <span class="built_in">cd</span> ..</span><br><span class="line">$ ln -s ˜/github/yourname.github.io hexo <span class="comment"># 链接博客目录</span></span><br><span class="line">$ ln -s ˜/hexo/<span class="built_in">source</span>/_posts <span class="comment"># 链接博客文章</span></span><br><span class="line"><span class="comment"># 这样，你的home目录下面应该有博客文章、github、博客三个快速访问链接</span></span><br><span class="line">$ ls</span><br><span class="line">blog  github  hexo  storage</span><br></pre></td></tr></table></figure>

<hr>
<p>到此所有的操作就结束了，如果各位发现我有写得不妥之处，欢迎指正！</p>
]]></content>
      <categories>
        <category>instructions</category>
      </categories>
      <tags>
        <tag>instructions</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>c# notes</title>
    <url>/2020/02/06/csharp-learing/</url>
    <content><![CDATA[<p>未完结,不定期更新</p>
<hr>
<p>源:<a href="https://www.runoob.com/csharp/csharp-tutorial.html" target="_blank" rel="noopener">https://www.runoob.com/csharp/csharp-tutorial.html</a></p>
<h2 id="c-入门"><a href="#c-入门" class="headerlink" title="c#入门"></a>c#入门</h2><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><p>特性:</p>
<blockquote>
<p>现代的、通用的编程语言<br>面向对象<br>面向组件<br>容易学习<br>结构化语言<br>它产生高效率的程序<br>它可以在多种计算机平台上编译<br>.Net 框架的一部分  </p>
</blockquote>
<p>重要功能:</p>
<blockquote>
<p>布尔条件（Boolean Conditions）<br>自动垃圾回收（Automatic Garbage Collection）<br>标准库（Standard Library）<br>组件版本（Assembly Versioning）<br>属性（Properties）和事件（Events）<br>委托（Delegates）和事件管理（Events Management）<br>易于使用的泛型（Generics）<br>索引器（Indexers）<br>条件编译（Conditional Compilation）<br>简单的多线程（Multithreading）<br>LINQ 和 Lambda 表达式<br>集成 Windows  </p>
</blockquote>
<p>.net框架:<br>.Net 框架是一个创新的平台，能帮您编写出下面类型的应用程序：</p>
<blockquote>
<p>Windows 应用程序<br>Web 应用程序<br>Web 服务  </p>
</blockquote>
<p>.Net 框架应用程序是多平台的应用程序。框架的设计方式使它适用于下列各种语言：C#、C++、Visual Basic、Jscript、COBOL 等等。所有这些语言可以访问框架，彼此之间也可以互相交互。</p>
<blockquote>
<p>.Net 框架由一个巨大的代码库组成，用于 C# 等客户端语言。下面列出一些 .Net 框架的组件：<br>公共语言运行库（Common Language Runtime - CLR）<br>.Net 框架类库（.Net Framework Class Library）<br>公共语言规范（Common Language Specification）<br>通用类型系统（Common Type System）<br>元数据（Metadata）和组件（Assemblies）<br>Windows 窗体（Windows Forms）<br>ASP.Net 和 ASP.Net AJAX<br>ADO.Net<br>Windows 工作流基础（Windows Workflow Foundation - WF）<br>Windows 显示基础（Windows Presentation Foundation）<br>Windows 通信基础（Windows Communication Foundation - WCF）<br>LINQ    </p>
</blockquote>
<a id="more"></a>

<h3 id="程序结构"><a href="#程序结构" class="headerlink" title="程序结构"></a>程序结构</h3><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;   <span class="comment">//使用名字空间</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">HelloWorldApplication</span> <span class="comment">//一个名字空间</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">class</span> <span class="title">HelloWorld</span> <span class="comment">//一个类</span></span><br><span class="line">   &#123;    <span class="comment">//类方法、类属性</span></span><br><span class="line">      <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)   <span class="comment">//main方法</span></span></span><br><span class="line"><span class="function"></span>      &#123;</span><br><span class="line">         <span class="comment">/* 我的第一个 C# 程序*/</span></span><br><span class="line">         Console.WriteLine(<span class="string">"Hello World"</span>);</span><br><span class="line">         Console.ReadKey();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>说明:</p>
<ul>
<li>程序的第一行 using System; - using 关键字用于在程序中包含 System 命名空间。 一个程序一般有多个 using 语句。</li>
<li>下一行是 namespace 声明。一个 namespace 里包含了一系列的类。HelloWorldApplication 命名空间包含了类 HelloWorld。</li>
<li>下一行是 class 声明。类 HelloWorld 包含了程序使用的数据和方法声明。类一般包含多个方法。方法定义了类的行为。在这里，HelloWorld 类只有一个 Main 方法。</li>
<li>下一行定义了 Main 方法，是所有 C# 程序的 入口点。Main 方法说明当执行时 类将做什么动作。</li>
<li>下一行 /<em>…</em>/ 将会被编译器忽略，且它会在程序中添加额外的 注释。</li>
<li>Main 方法通过语句 Console.WriteLine(“Hello World”); 指定了它的行为。 </li>
<li>WriteLine 是一个定义在 System 命名空间中的 Console 类的一个方法。该语句会在屏幕上显示消息 “Hello, World!”。</li>
<li>最后一行 Console.ReadKey(); 是针对 VS.NET 用户的。这使得程序会等待一个按键的动作，防止程序从 Visual Studio .NET 启动时屏幕会快速运行并关闭。  </li>
</ul>
<p>以下几点值得注意：</p>
<ul>
<li>C# 是大小写敏感的。</li>
<li>所有的语句和表达式必须以分号（;）结尾。</li>
<li>程序的执行从 Main 方法开始。</li>
<li>与 Java 不同的是，文件名可以不同于类的名称</li>
</ul>
<h3 id="一些基础知识"><a href="#一些基础知识" class="headerlink" title="一些基础知识"></a>一些基础知识</h3><h4 id="可空类型"><a href="#可空类型" class="headerlink" title="可空类型"></a>可空类型</h4><p>&lt;data_type&gt;?或Nullable&lt;data_type&gt;表示一个可空类型,其除了可以被data_type范围内的对象赋值之外还可以被赋值为null  </p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>? i = <span class="number">3</span> </span><br><span class="line">等同于</span><br><span class="line">Nullable&lt;<span class="keyword">int</span>&gt; i = <span class="keyword">new</span> Nullable&lt;<span class="keyword">int</span>&gt;(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i; <span class="comment">//默认值0</span></span><br><span class="line"><span class="keyword">int</span>? i; <span class="comment">//默认值null</span></span><br></pre></td></tr></table></figure>

<p>‘??’运算:Null合并运算符  </p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">CalculatorApplication</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">class</span> <span class="title">NullablesAtShow</span></span><br><span class="line">   &#123;</span><br><span class="line">         </span><br><span class="line">      <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>      &#123;</span><br><span class="line">         </span><br><span class="line">         <span class="keyword">double</span>? num1 = <span class="literal">null</span>;</span><br><span class="line">         <span class="keyword">double</span>? num2 = <span class="number">3.14157</span>;</span><br><span class="line">         <span class="keyword">double</span> num3;</span><br><span class="line">         num3 = num1 ?? <span class="number">5.34</span>;      <span class="comment">// num1 如果为空值则返回 5.34</span></span><br><span class="line">         Console.WriteLine(<span class="string">"num3 的值： &#123;0&#125;"</span>, num3);</span><br><span class="line">         num3 = num2 ?? <span class="number">5.34</span>;</span><br><span class="line">         Console.WriteLine(<span class="string">"num3 的值： &#123;0&#125;"</span>, num3);</span><br><span class="line">         Console.ReadLine();</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><p>数据类型<a href="https://www.runoob.com/csharp/csharp-data-types.html" target="_blank" rel="noopener">https://www.runoob.com/csharp/csharp-data-types.html</a><br>类型转换<a href="https://www.runoob.com/csharp/csharp-type-conversion.html" target="_blank" rel="noopener">https://www.runoob.com/csharp/csharp-type-conversion.html</a><br>变量<a href="https://www.runoob.com/csharp/csharp-variables.html" target="_blank" rel="noopener">https://www.runoob.com/csharp/csharp-variables.html</a><br>常量<a href="https://www.runoob.com/csharp/csharp-constants.html" target="_blank" rel="noopener">https://www.runoob.com/csharp/csharp-constants.html</a><br>运算符<a href="https://www.runoob.com/csharp/csharp-operators.html" target="_blank" rel="noopener">https://www.runoob.com/csharp/csharp-operators.html</a><br>数组<a href="https://www.runoob.com/csharp/csharp-array.html" target="_blank" rel="noopener">https://www.runoob.com/csharp/csharp-array.html</a><br>字符串<a href="https://www.runoob.com/csharp/csharp-string.html" target="_blank" rel="noopener">https://www.runoob.com/csharp/csharp-string.html</a><br>枚举<a href="https://www.runoob.com/csharp/csharp-enum.html" target="_blank" rel="noopener">https://www.runoob.com/csharp/csharp-enum.html</a>   </p>
<p>名字空间<a href="https://www.runoob.com/csharp/csharp-namespace.html" target="_blank" rel="noopener">https://www.runoob.com/csharp/csharp-namespace.html</a><br>预处理命令<a href="https://www.runoob.com/csharp/csharp-preprocessor-directives.html" target="_blank" rel="noopener">https://www.runoob.com/csharp/csharp-preprocessor-directives.html</a><br>正则表达式<a href="https://www.runoob.com/csharp/csharp-regular-expressions.html" target="_blank" rel="noopener">https://www.runoob.com/csharp/csharp-regular-expressions.html</a><br>异常处理<a href="https://www.runoob.com/csharp/csharp-exception-handling.html" target="_blank" rel="noopener">https://www.runoob.com/csharp/csharp-exception-handling.html</a><br>文件操作<a href="https://www.runoob.com/csharp/csharp-file-io.html" target="_blank" rel="noopener">https://www.runoob.com/csharp/csharp-file-io.html</a>  </p>
<h3 id="判断循环"><a href="#判断循环" class="headerlink" title="判断循环"></a>判断循环</h3><p>判断:  </p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">jiecheng</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">jiecheng</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">Jc</span>(<span class="params"><span class="keyword">int</span> num</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">return</span> num &gt; <span class="number">0</span> ? num *Jc(num - <span class="number">1</span>):<span class="number">1</span>;  <span class="comment">//如果num&gt;0则返回num *Jc(num - 1)，否则返回1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">excutejiecheng</span></span><br><span class="line">  </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            jiecheng n = <span class="keyword">new</span> jiecheng();</span><br><span class="line">            <span class="keyword">int</span> result = n.Jc(Convert.ToInt16(Console.ReadLine()));</span><br><span class="line">            Console.WriteLine(<span class="string">"result is &#123;0&#125;"</span>,result);</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>循环:  </p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Loops</span></span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">for</span> (; ; )</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">"Hey! I am Trapped"</span>);</span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h3><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">RectangleApplication</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Rectangle</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//成员变量</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">double</span> length;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">double</span> width;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">GetArea</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">return</span> length * width;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Display</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">"长度： &#123;0&#125;"</span>, length);</span><br><span class="line">            Console.WriteLine(<span class="string">"宽度： &#123;0&#125;"</span>, width);</span><br><span class="line">            Console.WriteLine(<span class="string">"面积： &#123;0&#125;"</span>, GetArea());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="comment">// Rectangle 结束</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">ExecuteRectangle</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Rectangle r = <span class="keyword">new</span> Rectangle();</span><br><span class="line">            r.length = <span class="number">4.5</span>;</span><br><span class="line">            r.width = <span class="number">3.5</span>;</span><br><span class="line">            r.Display();</span><br><span class="line">            Console.ReadLine();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>封装<a href="https://www.runoob.com/csharp/csharp-encapsulation.html" target="_blank" rel="noopener">https://www.runoob.com/csharp/csharp-encapsulation.html</a><br>方法<a href="https://www.runoob.com/csharp/csharp-methods.html" target="_blank" rel="noopener">https://www.runoob.com/csharp/csharp-methods.html</a><br>结构体<a href="https://www.runoob.com/csharp/csharp-struct.html" target="_blank" rel="noopener">https://www.runoob.com/csharp/csharp-struct.html</a><br>类<a href="https://www.runoob.com/csharp/csharp-class.html" target="_blank" rel="noopener">https://www.runoob.com/csharp/csharp-class.html</a><br>继承<a href="https://www.runoob.com/csharp/csharp-inheritance.html" target="_blank" rel="noopener">https://www.runoob.com/csharp/csharp-inheritance.html</a><br>多态<a href="https://www.runoob.com/csharp/csharp-polymorphism.html" target="_blank" rel="noopener">https://www.runoob.com/csharp/csharp-polymorphism.html</a><br>重载运算符<a href="https://www.runoob.com/csharp/csharp-operator-overloading.html" target="_blank" rel="noopener">https://www.runoob.com/csharp/csharp-operator-overloading.html</a><br>接口<a href="https://www.runoob.com/csharp/csharp-interface.html" target="_blank" rel="noopener">https://www.runoob.com/csharp/csharp-interface.html</a></p>
<h2 id="关于NuGet"><a href="#关于NuGet" class="headerlink" title="关于NuGet"></a>关于NuGet</h2><p>参考<a href="https://www.cnblogs.com/nizhenghua/p/6422078.html" target="_blank" rel="noopener">https://www.cnblogs.com/nizhenghua/p/6422078.html</a><br>NuGet（读作New Get）是用于微软.NET开发平台的软件包管理器，是一个Visual Studio的扩展。在使用Visual Studio开发基于.NET Framework的应用时，NuGet能够令你在项目中添加、移除和更新引用的工作变得更加快捷方便。  </p>
<p>可以在VS中打开安装相应的包, 相当于pip之于python、npm之于nodejs</p>
<h2 id="WPF应用程序-程序和界面分离"><a href="#WPF应用程序-程序和界面分离" class="headerlink" title="WPF应用程序,程序和界面分离"></a>WPF应用程序,程序和界面分离</h2><p>参考<a href="https://www.cnblogs.com/zpfbuaa/p/5380352.html" target="_blank" rel="noopener">https://www.cnblogs.com/zpfbuaa/p/5380352.html</a></p>
]]></content>
      <categories>
        <category>notes</category>
      </categories>
      <tags>
        <tag>learning</tag>
        <tag>c#</tag>
      </tags>
  </entry>
  <entry>
    <title>About the Blog</title>
    <url>/2020/02/06/about-the-blog/</url>
    <content><![CDATA[<h3 id="搭建参考"><a href="#搭建参考" class="headerlink" title="搭建参考"></a>搭建参考</h3><p>搭建：<a href="https://zhuanlan.zhihu.com/p/44213627" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/44213627</a><br>主题使用：<a href="https://github.com/Shen-Yu/hexo-theme-ayer" target="_blank" rel="noopener">https://github.com/Shen-Yu/hexo-theme-ayer</a><br>分类设置：<a href="https://www.zhihu.com/question/29017171" target="_blank" rel="noopener">https://www.zhihu.com/question/29017171</a></p>
<a id="more"></a>

<h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 本地运行博客</span></span><br><span class="line">$ hexo g</span><br><span class="line">$ hexo server </span><br><span class="line"></span><br><span class="line"><span class="comment"># 部署博客到github</span></span><br><span class="line">$ hexo clean    <span class="comment"># 可不加</span></span><br><span class="line">$ hexo generate <span class="comment"># hexo g</span></span><br><span class="line">$ hexo deploy   <span class="comment"># hexo d</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新hexo分支</span></span><br><span class="line">$ git pull origin hexo  <span class="comment"># 同步博客</span></span><br><span class="line">$ git add .     <span class="comment"># .github.io目录下</span></span><br><span class="line">$ git commit -m <span class="string">"update hexo branch"</span> <span class="comment"># 带解释地提交</span></span><br><span class="line">$ git push      <span class="comment"># 默认分支为hexo, -f 进行强制覆盖</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建博文</span></span><br><span class="line">$ hexo new [layout] &lt;title&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建菜单页</span></span><br><span class="line">$ hexo new page &lt;title&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建草稿</span></span><br><span class="line">$ hexo new draft &lt;title&gt;</span><br><span class="line">$ hexo server --draft   <span class="comment"># 预览草稿</span></span><br><span class="line">$ hexo publish draft newpage    <span class="comment"># 发布草稿</span></span><br></pre></td></tr></table></figure>

<h3 id="markdown语法"><a href="#markdown语法" class="headerlink" title="markdown语法"></a>markdown语法</h3><p><a href="https://www.jianshu.com/p/ebe52d2d468f" target="_blank" rel="noopener">https://www.jianshu.com/p/ebe52d2d468f</a><br><a href="https://www.runoob.com/markdown/md-tutorial.html" target="_blank" rel="noopener">https://www.runoob.com/markdown/md-tutorial.html</a></p>
]]></content>
      <categories>
        <category>instructions</category>
      </categories>
      <tags>
        <tag>instructions</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2000/02/28/hello-world/</url>
    <content><![CDATA[<p>欢迎来访！<br>本人初建博客，水平有限，请大家多谅解。</p>
<p><em>以下为原博文</em></p>
<hr>
<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
      <categories>
        <category>default</category>
      </categories>
      <tags>
        <tag>default</tag>
      </tags>
  </entry>
</search>
